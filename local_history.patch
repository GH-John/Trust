Index: app/src/main/res/layout/sb_navigation_header.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/sb_navigation_header.xml	(date 1586506719000)
+++ app/src/main/res/layout/sb_navigation_header.xml	(date 1586506719000)
@@ -18,34 +18,66 @@
         app:layout_constraintTop_toTopOf="parent" />
 
     <ImageButton
-        android:id="@+id/itemUserAccount"
+        android:id="@+id/itemSignIn"
+        android:layout_width="@dimen/sizeBtnActionBar"
+        android:layout_height="@dimen/sizeBtnActionBar"
+        android:layout_marginStart="16dp"
+        android:layout_marginTop="24dp"
+        android:background="@drawable/btn_background_dark"
+        android:contentDescription="@string/todo"
+        android:src="@drawable/sb_item_sign_in"
+        app:layout_constraintStart_toEndOf="@+id/itemLogout"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/itemSettings"
         android:layout_width="@dimen/sizeBtnActionBar"
         android:layout_height="@dimen/sizeBtnActionBar"
+        android:layout_marginTop="24dp"
         android:layout_marginEnd="24dp"
         android:background="@drawable/btn_background_dark"
         android:contentDescription="@string/todo"
-        android:src="@drawable/sb_item_user_account"
-        app:layout_constraintBottom_toBottomOf="parent"
+        android:src="@drawable/sb_item_settings"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintTop_toTopOf="parent" />
 
+    <de.hdodenhof.circleimageview.CircleImageView
+        android:id="@+id/itemUserLogo"
+        android:layout_width="32dp"
+        android:layout_height="32dp"
+        android:layout_marginStart="24dp"
+        android:layout_marginTop="32dp"
+        android:contentDescription="@string/todo"
+        android:src="@drawable/sb_item_user_logo"
+        app:civ_border_color="@color/colorAccent"
+        app:civ_border_width="2dp"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/itemLogout" />
+
     <TextView
         android:id="@+id/itemUserName"
         style="@style/DefaultStyleTextRegular.Header"
         android:layout_width="0dp"
         android:layout_height="wrap_content"
-        android:layout_marginStart="20dp"
-        android:layout_marginEnd="40dp"
+        android:layout_marginStart="24dp"
         android:contentDescription="@string/todo"
         android:gravity="center"
         android:text="@string/text_user_name"
-        android:textAlignment="textEnd"
+        android:textAlignment="textStart"
         android:textColor="@color/colorText"
         android:visibility="visible"
-        app:layout_constraintBottom_toBottomOf="@+id/itemUserAccount"
-        app:layout_constraintEnd_toStartOf="@+id/itemUserAccount"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="@+id/itemUserAccount"
+        app:layout_constraintStart_toEndOf="@+id/itemUserLogo"
+        app:layout_constraintTop_toTopOf="@+id/itemUserLogo"
         tools:ignore="RtlCompat"
         tools:visibility="visible" />
+
+    <TextView
+        android:id="@+id/itemUserLogin"
+        style="@style/DefaultStyleTextRegular"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="12dp"
+        android:text="@string/hint_login"
+        app:layout_constraintStart_toStartOf="@+id/itemUserName"
+        app:layout_constraintTop_toBottomOf="@+id/itemUserName" />
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/res/layout/activity_registration.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_registration.xml	(date 1586461684000)
+++ app/src/main/res/layout/activity_registration.xml	(date 1586461684000)
@@ -115,12 +115,12 @@
                 tools:ignore="Autofill" />
 
             <EditText
-                android:id="@+id/fieldEmailReg"
+                android:id="@+id/fieldLoginReg"
                 style="@style/DefaultStyleField"
                 android:layout_width="0dp"
                 android:layout_height="50dp"
                 android:layout_marginTop="24dp"
-                android:hint="@string/hint_email"
+                android:hint="@string/hint_login"
                 android:inputType="textEmailAddress"
                 app:layout_constraintEnd_toEndOf="parent"
                 app:layout_constraintStart_toStartOf="parent"
@@ -128,11 +128,24 @@
                 tools:ignore="Autofill" />
 
             <EditText
-                android:id="@+id/fieldPassReg"
+                android:id="@+id/fieldEmailReg"
                 style="@style/DefaultStyleField"
                 android:layout_width="0dp"
                 android:layout_height="50dp"
                 android:layout_marginTop="8dp"
+                android:hint="@string/hint_email"
+                android:inputType="textEmailAddress"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/fieldLoginReg"
+                tools:ignore="Autofill" />
+
+            <EditText
+                android:id="@+id/fieldPassReg"
+                style="@style/DefaultStyleField"
+                android:layout_width="0dp"
+                android:layout_height="50dp"
+                android:layout_marginTop="24dp"
                 android:hint="@string/hint_password"
                 android:inputType="textPassword"
                 app:layout_constraintEnd_toEndOf="parent"
@@ -140,6 +153,19 @@
                 app:layout_constraintTop_toBottomOf="@+id/fieldEmailReg"
                 tools:ignore="Autofill" />
 
+            <EditText
+                android:id="@+id/fieldConfirmPassReg"
+                style="@style/DefaultStyleField"
+                android:layout_width="0dp"
+                android:layout_height="50dp"
+                android:layout_marginTop="8dp"
+                android:hint="@string/hint_confirm_password"
+                android:inputType="textPassword"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@+id/fieldPassReg"
+                tools:ignore="Autofill" />
+
             <EditText
                 android:id="@+id/fieldPhoneReg"
                 style="@style/DefaultStyleField"
@@ -150,7 +176,7 @@
                 android:inputType="phone"
                 app:layout_constraintEnd_toEndOf="parent"
                 app:layout_constraintStart_toStartOf="parent"
-                app:layout_constraintTop_toBottomOf="@+id/fieldPassReg"
+                app:layout_constraintTop_toBottomOf="@+id/fieldConfirmPassReg"
                 tools:ignore="Autofill" />
 
             <Button
Index: app/src/main/res/layout/activity_authorization.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/activity_authorization.xml	(date 1586468562000)
+++ app/src/main/res/layout/activity_authorization.xml	(date 1586468562000)
@@ -57,6 +57,18 @@
         app:layout_constraintTop_toTopOf="parent"
         tools:ignore="Autofill,LabelFor" />
 
+    <TextView
+        android:id="@+id/itemForgotPass"
+        style="@style/DefaultStyleTextRegular"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="12dp"
+        android:text="@string/text_forgot_password"
+        android:textColor="@color/colorHint"
+        app:layout_constraintEnd_toEndOf="@+id/fieldPassAuth"
+        app:layout_constraintStart_toStartOf="@+id/fieldPassAuth"
+        app:layout_constraintTop_toBottomOf="@+id/fieldPassAuth" />
+
     <Button
         android:id="@+id/btnSignAuth"
         style="@style/DefaultStylePrimaryBtn"
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(date 1586468957000)
+++ app/src/main/res/values/strings.xml	(date 1586468957000)
@@ -168,4 +168,9 @@
     <string name="notification_loading_text_insert_announcement">Загрузка …</string>
     <string name="notification_title_insert_announcement">Загрузка объявления</string>
     <string name="internal_storage">Internal storage</string>
+    <string name="hint_login">Логин</string>
+    <string name="hint_confirm_password">Подтвердите пароль</string>
+    <string name="error_confirm_password">Пароли не совпадают</string>
+    <string name="text_forgot_password">Забыли пароль?</string>
+    <string name="instruction_send_to_email">Инструкция по восстановлению отправлена на почту</string>
 </resources>
\ No newline at end of file
Index: app/src/main/res/drawable/sb_item_sign_in.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/sb_item_sign_in.xml	(date 1586452764000)
+++ app/src/main/res/drawable/sb_item_sign_in.xml	(date 1586452764000)
@@ -0,0 +1,22 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="18dp"
+    android:height="22dp"
+    android:viewportWidth="18"
+    android:viewportHeight="22">
+  <path
+      android:pathData="M6,6L11,11L6,16M11,11L1,11"
+      android:strokeLineJoin="round"
+      android:strokeWidth="2"
+      android:fillColor="#00000000"
+      android:strokeColor="#3A3A3A"
+      android:fillType="evenOdd"
+      android:strokeLineCap="round"/>
+  <path
+      android:pathData="M8,1l9,0l0,20l-9,0"
+      android:strokeLineJoin="round"
+      android:strokeWidth="2"
+      android:fillColor="#00000000"
+      android:strokeColor="#3A3A3A"
+      android:fillType="evenOdd"
+      android:strokeLineCap="round"/>
+</vector>
Index: app/src/main/res/drawable/sb_item_settings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/sb_item_settings.xml	(date 1586505189000)
+++ app/src/main/res/drawable/sb_item_settings.xml	(date 1586505189000)
@@ -0,0 +1,18 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="20dp"
+    android:height="20dp"
+    android:viewportWidth="20"
+    android:viewportHeight="20">
+  <path
+      android:pathData="M10.6276,20L9.3724,20C8.3572,20 7.5312,19.1741 7.5312,18.1589L7.5312,17.7342C7.0996,17.5963 6.6803,17.4223 6.2774,17.2138L5.9765,17.5147C5.2476,18.2445 4.0801,18.2231 3.3724,17.5145L2.4852,16.6273C1.7763,15.9192 1.7559,14.752 2.4855,14.0232L2.7862,13.7225C2.5777,13.3197 2.4037,12.9004 2.2657,12.4688L1.8411,12.4688C0.826,12.4688 0,11.6428 0,10.6276L0,9.3724C0,8.3572 0.826,7.5313 1.8412,7.5313L2.2658,7.5313C2.4037,7.0996 2.5777,6.6803 2.7862,6.2775L2.4853,5.9766C1.7561,5.2482 1.7763,4.0809 2.4855,3.3725L3.3727,2.4853C4.0821,1.775 5.2493,1.7572 5.9768,2.4855L6.2775,2.7862C6.6803,2.5777 7.0996,2.4037 7.5313,2.2657L7.5313,1.8411C7.5313,0.8259 8.3572,0 9.3724,0L10.6276,0C11.6428,0 12.4688,0.8259 12.4688,1.8411L12.4688,2.2658C12.9004,2.4037 13.3197,2.5777 13.7225,2.7862L14.0235,2.4853C14.7523,1.7555 15.9199,1.7769 16.6276,2.4855L17.5147,3.3727C18.2237,4.0808 18.2441,5.248 17.5145,5.9768L17.2138,6.2775C17.4223,6.6803 17.5963,7.0996 17.7342,7.5313L18.1588,7.5313C19.174,7.5313 20,8.3572 20,9.3724L20,10.6276C20,11.6428 19.174,12.4688 18.1588,12.4688L17.7342,12.4688C17.5963,12.9004 17.4223,13.3197 17.2138,13.7225L17.5147,14.0235C18.2439,14.7518 18.2237,15.9191 17.5145,16.6276L16.6273,17.5148C15.9179,18.2251 14.7507,18.2428 14.0232,17.5145L13.7225,17.2139C13.3197,17.4223 12.9004,17.5964 12.4688,17.7343L12.4688,18.1589C12.4688,19.1741 11.6428,20 10.6276,20ZM6.8041,15.4219C7.3113,15.7219 7.8571,15.9485 8.4265,16.0954C8.6609,16.1559 8.8248,16.3674 8.8248,16.6095L8.8248,17.3935C8.8248,17.7279 9.0969,18 9.4313,18L10.5687,18C10.9031,18 11.1752,17.7279 11.1752,17.3935L11.1752,16.6095C11.1752,16.3674 11.3391,16.1559 11.5735,16.0954C12.1429,15.9485 12.6887,15.7219 13.1959,15.4219C13.4045,15.2985 13.6702,15.3321 13.8416,15.5035L14.397,16.0589C14.6364,16.2986 15.0209,16.2931 15.2544,16.0592L16.0589,15.2547C16.2919,15.022 16.2997,14.6374 16.0592,14.3972L15.5036,13.8416C15.3322,13.6702 15.2986,13.4045 15.422,13.1959C15.7219,12.6887 15.9485,12.1429 16.0954,11.5735C16.1559,11.339 16.3674,11.1753 16.6095,11.1753L17.3935,11.1753C17.7279,11.1753 18,10.9032 18,10.5688L18,9.4313C18,9.0969 17.7279,8.8248 17.3935,8.8248L16.6095,8.8248C16.3674,8.8248 16.1559,8.661 16.0954,8.4265C15.9485,7.8572 15.7219,7.3113 15.422,6.8042C15.2986,6.5956 15.3322,6.3299 15.5036,6.1585L16.0589,5.6031C16.299,5.3633 16.2927,4.9789 16.0592,4.7456L15.2547,3.9412C15.0216,3.7077 14.637,3.7008 14.3972,3.941L13.8417,4.4965C13.6703,4.668 13.4045,4.7015 13.1959,4.5781C12.6888,4.2782 12.1429,4.0516 11.5736,3.9047C11.3391,3.8442 11.1753,3.6327 11.1753,3.3905L11.1753,2.6065C11.1753,2.2721 10.9032,2 10.5688,2L9.4313,2C9.0969,2 8.8248,2.2721 8.8248,2.6065L8.8248,3.3905C8.8248,3.6326 8.661,3.8441 8.4265,3.9046C7.8572,4.0515 7.3113,4.2781 6.8042,4.5781C6.5955,4.7014 6.3298,4.6679 6.1584,4.4965L5.6031,3.9411C5.3636,3.7014 4.9791,3.7069 4.7456,3.9408L3.9411,4.7453C3.7081,4.978 3.7003,5.3625 3.9409,5.6028L4.4965,6.1584C4.6679,6.3298 4.7014,6.5955 4.578,6.8041C4.2781,7.3113 4.0516,7.8571 3.9046,8.4265C3.8441,8.661 3.6326,8.8247 3.3905,8.8247L2.6065,8.8247C2.2721,8.8248 2,9.0968 2,9.4313L2,10.5687C2,10.9032 2.2721,11.1752 2.6065,11.1752L3.3905,11.1752C3.6326,11.1752 3.8441,11.339 3.9046,11.5735C4.0515,12.1429 4.2781,12.6887 4.578,13.1958C4.7014,13.4045 4.6678,13.6702 4.4964,13.8416L3.9411,14.3969C3.701,14.6367 3.7073,15.0211 3.9408,15.2544L4.7453,16.0589C4.9784,16.2924 5.363,16.2992 5.6028,16.0591L6.1583,15.5035C6.2846,15.3772 6.5474,15.2701 6.8041,15.4219L6.8041,15.4219Z"
+      android:strokeWidth="1"
+      android:fillColor="#3A3A3A"
+      android:fillType="nonZero"
+      android:strokeColor="#00000000"/>
+  <path
+      android:pathData="M10,14C7.7944,14 6,12.2056 6,10C6,7.7944 7.7944,6 10,6C12.2056,6 14,7.7944 14,10C14,12.2056 12.2056,14 10,14ZM10,7.7778C8.7746,7.7778 7.7778,8.7747 7.7778,10C7.7778,11.2253 8.7747,12.2222 10,12.2222C11.2253,12.2222 12.2222,11.2253 12.2222,10C12.2222,8.7747 11.2254,7.7778 10,7.7778L10,7.7778Z"
+      android:strokeWidth="1"
+      android:fillColor="#3A3A3A"
+      android:fillType="nonZero"
+      android:strokeColor="#00000000"/>
+</vector>
Index: app/src/main/res/drawable/sb_item_user_logo.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/drawable/sb_item_user_logo.xml	(date 1586506198000)
+++ app/src/main/res/drawable/sb_item_user_logo.xml	(date 1586506198000)
@@ -0,0 +1,19 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="18dp"
+    android:height="19dp"
+    android:viewportWidth="18"
+    android:viewportHeight="19">
+  <path
+      android:pathData="M9,4.5556m-3.5556,0a3.5556,3.5556 0,1 1,7.1111 0a3.5556,3.5556 0,1 1,-7.1111 0"
+      android:strokeWidth="2"
+      android:fillColor="#3A3A3A"
+      android:fillType="nonZero"
+      android:strokeColor="#3A3A3A"/>
+  <path
+      android:pathData="M12.7568,17.7844C11.5306,17.9264 10.2762,18 9,18C7.6985,18 6.4196,17.9235 5.1703,17.7759L4.145,17.6378C3.0713,17.4755 2.0215,17.2603 1,16.9959L1,15.3603C1,13.0104 2.4162,11.0823 5.3512,10.8889C6.0509,11.4556 7.9178,11.8076 9,11.8076C10.0822,11.8076 11.6667,11.6 12.6488,10.8889C15.5838,11.0823 17,13.0104 17,15.3603L17,16.9959C15.9581,17.2656 14.8868,17.484 13.7908,17.6475L12.7568,17.7844Z"
+      android:strokeLineJoin="round"
+      android:strokeWidth="2"
+      android:fillColor="#3A3A3A"
+      android:fillType="nonZero"
+      android:strokeColor="#3A3A3A"/>
+</vector>
Index: app/src/main/res/drawable/sb_item_user_account.xml
===================================================================
--- app/src/main/res/drawable/sb_item_user_account.xml	(date 0)
+++ app/src/main/res/drawable/sb_item_user_account.xml	(date 0)
@@ -1,19 +0,0 @@
-<vector xmlns:android="http://schemas.android.com/apk/res/android"
-    android:width="70dp"
-    android:height="70dp"
-    android:viewportWidth="70"
-    android:viewportHeight="70">
-
-  <path
-      android:pathData="M44.3919,55.3027C41.3265,55.7621 38.1905,56 35,56C31.7462,56 28.5491,55.7525 25.4257,55.2751L22.8624,43.6233L22.8624,54.8286C20.1783,54.3035 17.5538,53.6075 15,52.7522L15,47.4624C15,39.8617 20.7627,33.6255 28.1001,33C29.8494,34.8331 32.2944,35.9716 35,35.9716C37.7056,35.9716 40.1506,34.8331 41.8999,33C49.2373,33.6255 55,39.8617 55,47.4624L55,52.7522C52.3953,53.6246 49.7169,54.3312 46.9769,54.8598L46.9769,43.6225L44.3919,55.3027Z"
-      android:strokeWidth="1"
-      android:fillColor="#3A3A3A"
-      android:fillType="nonZero"
-      android:strokeColor="#00000000"/>
-  <path
-      android:pathData="M25,23.5a9.7436,9.5 0,1 0,19.4872 0a9.7436,9.5 0,1 0,-19.4872 0z"
-      android:strokeWidth="1"
-      android:fillColor="#3A3A3A"
-      android:fillType="nonZero"
-      android:strokeColor="#00000000"/>
-</vector>
Index: app/src/main/java/com/application/arenda/UI/Components/SideBar/ContainerDrawerLayout.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/UI/Components/SideBar/ContainerDrawerLayout.java	(date 1586614473000)
+++ app/src/main/java/com/application/arenda/UI/Components/SideBar/ContainerDrawerLayout.java	(date 1586614473000)
@@ -2,15 +2,21 @@
 
 import android.annotation.SuppressLint;
 import android.app.Activity;
-import android.graphics.Color;
+import android.content.Context;
+import android.content.Intent;
 import android.view.MenuItem;
+import android.view.View;
 import android.widget.FrameLayout;
 import android.widget.ImageButton;
+import android.widget.TextView;
 
 import androidx.annotation.NonNull;
 import androidx.drawerlayout.widget.DrawerLayout;
 
+import com.application.arenda.Entities.Authentication.Authentication;
+import com.application.arenda.Entities.Models.User;
 import com.application.arenda.Entities.Utils.Utils;
+import com.application.arenda.MainWorkspace.Activities.ActivityAuthorization;
 import com.application.arenda.MainWorkspace.Fragments.FragmentAllAnnouncements;
 import com.application.arenda.MainWorkspace.Fragments.FragmentCustomerService;
 import com.application.arenda.MainWorkspace.Fragments.FragmentProhibited;
@@ -24,8 +30,11 @@
 import com.application.arenda.R;
 import com.application.arenda.UI.Components.ComponentManager;
 import com.application.arenda.UI.Components.ContainerFragments.ContainerFragments;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.exceptions.BackendlessFault;
 import com.google.android.material.navigation.NavigationView;
 
+import de.hdodenhof.circleimageview.CircleImageView;
 import timber.log.Timber;
 
 public final class ContainerDrawerLayout implements SideBar,
@@ -38,15 +47,25 @@
 
     private NavigationView leftMenu;
 
+    private View headerNavigation;
+
+    private TextView itemUserName, itemUserLogin;
+
     private FrameLayout rightMenu;
 
-    private ImageButton itemUserAccount, itemLogout;
+    private ImageButton itemLogout, itemSignIn, itemSettings;
+
+    private CircleImageView itemUserLogo;
 
     private ContainerFragments containerFragments;
 
+    private Authentication authentication;
+
     private ContainerDrawerLayout(Activity activity) {
         initComponents(activity);
 
+        inflateComponents(activity);
+
         initListeners();
     }
 
@@ -58,20 +77,51 @@
     }
 
     private void initComponents(Activity activity) {
+        authentication = Authentication.getInstance();
+
         leftMenu = activity.findViewById(R.id.sbLeftMenu);
+        headerNavigation = leftMenu.getHeaderView(0);
+
         drawerLayout = activity.findViewById(R.id.sbDrawerMenu);
         rightMenu = activity.findViewById(R.id.sbRightMenuLayout);
 
-        itemLogout = activity.findViewById(R.id.itemLogout);
-        itemUserAccount = activity.findViewById(R.id.itemUserAccount);
+        itemLogout = headerNavigation.findViewById(R.id.itemLogout);
+        itemSignIn = headerNavigation.findViewById(R.id.itemSignIn);
+        itemSettings = headerNavigation.findViewById(R.id.itemSettings);
+        itemUserName = headerNavigation.findViewById(R.id.itemUserName);
+        itemUserLogin = headerNavigation.findViewById(R.id.itemUserLogin);
+        itemUserLogo = headerNavigation.findViewById(R.id.itemUserLogo);
 
         containerFragments = ContainerFragments.getInstance(activity);
 
-        drawerLayout.setScrimColor(Color.TRANSPARENT);
+        drawerLayout.setScrimColor(activity.getResources().getColor(R.color.shadowColor));
+    }
+
+    @SuppressLint("SetTextI18n")
+    private void inflateComponents(Context context) {
+        authentication.getUserData(new AsyncCallback<User>() {
+            @Override
+            public void handleResponse(User response) {
+                itemUserName.setText(response.getLastName() + " " + response.getName());
+                itemUserLogin.setText(response.getLogin());
+            }
+
+            @Override
+            public void handleFault(BackendlessFault fault) {
+                Utils.messageOutput(context, "Error - " + fault.getMessage());
+                Timber.e(fault.getMessage());
+            }
+        });
     }
 
     private void initListeners() {
         leftMenu.setNavigationItemSelectedListener(this);
+
+        itemSignIn.setOnClickListener(this::openActivityAuthorization);
+    }
+
+    private void openActivityAuthorization(View view) {
+        view.getContext().startActivity(new Intent(view.getContext(), ActivityAuthorization.class));
     }
 
     private void setCheckedItem(ItemSideBar item) {
Index: app/src/main/java/com/application/arenda/UI/ContainerImg/ContainerSelectedImages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/UI/ContainerImg/ContainerSelectedImages.java	(date 1586687612000)
+++ app/src/main/java/com/application/arenda/UI/ContainerImg/ContainerSelectedImages.java	(date 1586687612000)
@@ -101,7 +101,7 @@
     @Override
     public void clearContainer() {
         this.containerImg.post(() -> {
-            containerImg.removeAllViews();
+            containerImg.removeViews(1, CURRENT_SIZE_CONTAINER());
             decrementToCounter();
         });
     }
Index: app/src/main/java/com/application/arenda/Entities/User/AccountType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/User/AccountType.java	(date 1586477712000)
+++ app/src/main/java/com/application/arenda/Entities/User/AccountType.java	(date 1586477712000)
@@ -1,8 +1,8 @@
 package com.application.arenda.Entities.User;
 
 public enum AccountType {
-    PRIVATE_PERSON("private_person"),
-    BUSINESS_PERSON("business_person");
+    PRIVATE_PERSON("PRIVATE_PERSON"),
+    BUSINESS_PERSON("BUSINESS_PERSON");
 
     private String type = "";
 
Index: app/src/main/java/com/application/arenda/Entities/Utils/Utils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Utils/Utils.java	(date 1586676412000)
+++ app/src/main/java/com/application/arenda/Entities/Utils/Utils.java	(date 1586676412000)
@@ -15,7 +15,6 @@
 import androidx.core.content.ContextCompat;
 
 import com.application.arenda.R;
-import com.jakewharton.threetenabp.AndroidThreeTen;
 
 import org.threeten.bp.LocalDate;
 import org.threeten.bp.LocalDateTime;
@@ -66,12 +65,17 @@
     }
 
     public static String getFormatingDate(Context context, String date) {
-        AndroidThreeTen.init(context);
         LocalDate today = LocalDate.now();
 
-        LocalDateTime dateTime = LocalDateTime.parse(date, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
+        //"E, MMM dd yyyy HH:mm:ss"
+        //Thu, Dec 31 1998 23:37:50
+
+        //E MMM dd HH:mm:ss  yyyy
+        //Fri Apr 10 10:11:53 GMT+03:00 2020
 
-        LocalDateTime test = LocalDateTime.parse(date, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
+
+        LocalDateTime dateTime = LocalDateTime.parse(date);
+//        LocalDateTime dateTime = LocalDateTime.parse(date, DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
 
         if (today.getDayOfYear() - dateTime.getDayOfYear() == 0)
             return context.getString(R.string.text_today) + ", " + dateTime.format(DateTimeFormatter.ofPattern("HH:mm"));
@@ -224,10 +228,12 @@
         pattern = Pattern.compile(".+@.+\\..+");
         if (fields.length > 0) {
             for (EditText field : fields) {
-                matcher = pattern.matcher(field.getText().toString());
-                if (!matcher.find()) {
-                    field.setError(context.getResources().getString(R.string.error_incorrect_format_email));
-                    countIncorrectFields++;
+                if (field != null) {
+                    matcher = pattern.matcher(field.getText().toString());
+                    if (!matcher.find()) {
+                        field.setError(context.getResources().getString(R.string.error_incorrect_format_email));
+                        countIncorrectFields++;
+                    }
                 }
             }
             return countIncorrectFields == 0;
@@ -239,7 +245,7 @@
         int countEmpty = 0;
         if (fields.length > 0) {
             for (EditText field : fields) {
-                if (field.getText().toString().isEmpty()) {
+                if (field != null && field.getText().toString().isEmpty()) {
                     field.setError(context.getResources().getString(R.string.error_empty_field));
                     countEmpty++;
                 }
@@ -255,14 +261,26 @@
         pattern = Pattern.compile("[\\W_0-9]+");
         if (fields.length > 0) {
             for (EditText field : fields) {
-                matcher = pattern.matcher(field.getText().toString());
-                if (matcher.find()) {
-                    field.setError(context.getResources().getString(R.string.error_incorrect_chars));
-                    countIncorrectFields++;
+                if (field != null) {
+                    matcher = pattern.matcher(field.getText().toString());
+                    if (matcher.find()) {
+                        field.setError(context.getResources().getString(R.string.error_incorrect_chars));
+                        countIncorrectFields++;
+                    }
                 }
             }
             return countIncorrectFields == 0;
         }
         return false;
     }
+
+    public static boolean isConfirmPassword(Context context, EditText fieldPassReg, EditText fieldConfirmPassReg) {
+        if (fieldPassReg.getText().toString().equals(fieldConfirmPassReg.getText().toString())) {
+            return true;
+        } else {
+            fieldConfirmPassReg.setError(context.getResources().getString(R.string.error_confirm_password));
+        }
+
+        return false;
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Utils/FileUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Utils/FileUtils.java	(date 1586513604000)
+++ app/src/main/java/com/application/arenda/Entities/Utils/FileUtils.java	(date 1586513604000)
@@ -6,6 +6,8 @@
 import android.os.ParcelFileDescriptor;
 import android.provider.OpenableColumns;
 
+import androidx.annotation.NonNull;
+
 import com.github.piasy.biv.utils.IOUtils;
 
 import java.io.File;
@@ -15,7 +17,32 @@
 import java.io.InputStream;
 import java.io.OutputStream;
 
+import okhttp3.MediaType;
+import okhttp3.MultipartBody;
+import okhttp3.RequestBody;
+import timber.log.Timber;
+
 public class FileUtils {
+    @NonNull
+    public static RequestBody createPartFromString(String s) {
+        return RequestBody.create(MultipartBody.FORM, s);
+    }
+
+    @NonNull
+    public static MultipartBody.Part createFilePart(Context context, String partName, Uri uri) {
+        try {
+            File file = getFileFromUri(context, uri);
+
+            RequestBody requestBody = RequestBody.create(MediaType.parse(context.getContentResolver().getType(uri)), file);
+
+            return MultipartBody.Part.createFormData(partName, file.getName(), requestBody);
+
+        } catch (Throwable e) {
+            Timber.e(e);
+        }
+        return null;
+    }
+
     public static File getFileFromUri(Context context, Uri uri) {
         try {
             ParcelFileDescriptor descriptor = context.getContentResolver().openFileDescriptor(uri, "r", null);
Index: app/src/main/java/com/application/arenda/Entities/Models/Rent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/Rent.java	(date 1586625308000)
+++ app/src/main/java/com/application/arenda/Entities/Models/Rent.java	(date 1586625308000)
@@ -0,0 +1,77 @@
+package com.application.arenda.Entities.Models;
+
+import com.backendless.Backendless;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.persistence.DataQueryBuilder;
+
+import java.util.Date;
+import java.util.List;
+
+public class Rent extends BackendlessTable {
+    private Date rentalEnd;
+    private Date rentalStart;
+
+    public static Rent findById(String id) {
+        return Backendless.Data.of(Rent.class).findById(id);
+    }
+
+    public static void findByIdAsync(String id, AsyncCallback<Rent> callback) {
+        Backendless.Data.of(Rent.class).findById(id, callback);
+    }
+
+    public static Rent findFirst() {
+        return Backendless.Data.of(Rent.class).findFirst();
+    }
+
+    public static void findFirstAsync(AsyncCallback<Rent> callback) {
+        Backendless.Data.of(Rent.class).findFirst(callback);
+    }
+
+    public static Rent findLast() {
+        return Backendless.Data.of(Rent.class).findLast();
+    }
+
+    public static void findLastAsync(AsyncCallback<Rent> callback) {
+        Backendless.Data.of(Rent.class).findLast(callback);
+    }
+
+    public static List<Rent> find(DataQueryBuilder queryBuilder) {
+        return Backendless.Data.of(Rent.class).find(queryBuilder);
+    }
+
+    public static void findAsync(DataQueryBuilder queryBuilder, AsyncCallback<List<Rent>> callback) {
+        Backendless.Data.of(Rent.class).find(queryBuilder, callback);
+    }
+
+    public Date getRentalEnd() {
+        return rentalEnd == null ? new Date() : rentalEnd;
+    }
+
+    public void setRentalEnd(Date rentalEnd) {
+        this.rentalEnd = rentalEnd;
+    }
+
+    public Date getRentalStart() {
+        return rentalStart == null ? new Date() : rentalStart;
+    }
+
+    public void setRentalStart(Date rentalStart) {
+        this.rentalStart = rentalStart;
+    }
+
+    public Rent save() {
+        return Backendless.Data.of(Rent.class).save(this);
+    }
+
+    public void saveAsync(AsyncCallback<Rent> callback) {
+        Backendless.Data.of(Rent.class).save(this, callback);
+    }
+
+    public Long remove() {
+        return Backendless.Data.of(Rent.class).remove(this);
+    }
+
+    public void removeAsync(AsyncCallback<Long> callback) {
+        Backendless.Data.of(Rent.class).remove(this, callback);
+    }
+}
Index: app/src/main/java/com/application/arenda/Entities/Models/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/User.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/Models/User.java	(date 1586625309000)
@@ -0,0 +1,136 @@
+package com.application.arenda.Entities.Models;
+
+import com.application.arenda.Entities.User.AccountType;
+
+public class User extends BackendlessTable {
+    private String name = "";
+    private String lastName = "";
+
+    private String login = "";
+    private String email = "";
+    private String userPhotoUri = "";
+
+    private String address_1 = "";
+    private String address_2 = "";
+    private String address_3 = "";
+
+    private String phone_1 = "";
+    private String phone_2 = "";
+    private String phone_3 = "";
+
+    private AccountType accountType;
+    private double balance = 0.0d;
+    private double rating = 0.0d;
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    public String getLogin() {
+        return login;
+    }
+
+    public void setLogin(String login) {
+        this.login = login;
+    }
+
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public String getUserPhotoUri() {
+        return userPhotoUri;
+    }
+
+    public void setUserPhotoUri(String userPhotoUri) {
+        this.userPhotoUri = userPhotoUri;
+    }
+
+    public AccountType getAccountType() {
+        return accountType;
+    }
+
+    public void setAccountType(AccountType accountType) {
+        this.accountType = accountType;
+    }
+
+    public double getBalance() {
+        return balance;
+    }
+
+    public void setBalance(double balance) {
+        this.balance = balance;
+    }
+
+    public double getRating() {
+        return rating;
+    }
+
+    public void setRating(double rating) {
+        this.rating = rating;
+    }
+
+    public String getAddress_1() {
+        return address_1;
+    }
+
+    public void setAddress_1(String address_1) {
+        this.address_1 = address_1;
+    }
+
+    public String getAddress_2() {
+        return address_2;
+    }
+
+    public void setAddress_2(String address_2) {
+        this.address_2 = address_2;
+    }
+
+    public String getAddress_3() {
+        return address_3;
+    }
+
+    public void setAddress_3(String address_3) {
+        this.address_3 = address_3;
+    }
+
+    public String getPhone_1() {
+        return phone_1;
+    }
+
+    public void setPhone_1(String phone_1) {
+        this.phone_1 = phone_1;
+    }
+
+    public String getPhone_2() {
+        return phone_2;
+    }
+
+    public void setPhone_2(String phone_2) {
+        this.phone_2 = phone_2;
+    }
+
+    public String getPhone_3() {
+        return phone_3;
+    }
+
+    public void setPhone_3(String phone_3) {
+        this.phone_3 = phone_3;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/Photo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/Photo.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/Models/Photo.java	(date 1586625309000)
@@ -0,0 +1,76 @@
+package com.application.arenda.Entities.Models;
+
+import com.backendless.Backendless;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.persistence.DataQueryBuilder;
+
+import java.util.List;
+
+public class Photo extends BackendlessTable {
+    private String uri = "";
+    private Boolean isMain = false;
+
+    public static Photo findById(String id) {
+        return Backendless.Data.of(Photo.class).findById(id);
+    }
+
+    public static void findByIdAsync(String id, AsyncCallback<Photo> callback) {
+        Backendless.Data.of(Photo.class).findById(id, callback);
+    }
+
+    public static Photo findFirst() {
+        return Backendless.Data.of(Photo.class).findFirst();
+    }
+
+    public static void findFirstAsync(AsyncCallback<Photo> callback) {
+        Backendless.Data.of(Photo.class).findFirst(callback);
+    }
+
+    public static Photo findLast() {
+        return Backendless.Data.of(Photo.class).findLast();
+    }
+
+    public static void findLastAsync(AsyncCallback<Photo> callback) {
+        Backendless.Data.of(Photo.class).findLast(callback);
+    }
+
+    public static List<Photo> find(DataQueryBuilder queryBuilder) {
+        return Backendless.Data.of(Photo.class).find(queryBuilder);
+    }
+
+    public static void findAsync(DataQueryBuilder queryBuilder, AsyncCallback<List<Photo>> callback) {
+        Backendless.Data.of(Photo.class).find(queryBuilder, callback);
+    }
+
+    public String getUri() {
+        return uri;
+    }
+
+    public void setUri(String uri) {
+        this.uri = uri;
+    }
+
+    public Boolean getIsMain() {
+        return isMain;
+    }
+
+    public void setIsMain(Boolean isMain) {
+        this.isMain = isMain;
+    }
+
+    public Photo save() {
+        return Backendless.Data.of(Photo.class).save(this);
+    }
+
+    public void saveAsync(AsyncCallback<Photo> callback) {
+        Backendless.Data.of(Photo.class).save(this, callback);
+    }
+
+    public Long remove() {
+        return Backendless.Data.of(Photo.class).remove(this);
+    }
+
+    public void removeAsync(AsyncCallback<Long> callback) {
+        Backendless.Data.of(Photo.class).remove(this, callback);
+    }
+}
Index: app/src/main/java/com/application/arenda/Entities/Models/Review.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/Review.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/Models/Review.java	(date 1586625309000)
@@ -0,0 +1,76 @@
+package com.application.arenda.Entities.Models;
+
+import com.backendless.Backendless;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.persistence.DataQueryBuilder;
+
+import java.util.List;
+
+public class Review extends BackendlessTable {
+    private String review = "";
+    private Double rating = 0.0;
+
+    public static Review findById(String id) {
+        return Backendless.Data.of(Review.class).findById(id);
+    }
+
+    public static void findByIdAsync(String id, AsyncCallback<Review> callback) {
+        Backendless.Data.of(Review.class).findById(id, callback);
+    }
+
+    public static Review findFirst() {
+        return Backendless.Data.of(Review.class).findFirst();
+    }
+
+    public static void findFirstAsync(AsyncCallback<Review> callback) {
+        Backendless.Data.of(Review.class).findFirst(callback);
+    }
+
+    public static Review findLast() {
+        return Backendless.Data.of(Review.class).findLast();
+    }
+
+    public static void findLastAsync(AsyncCallback<Review> callback) {
+        Backendless.Data.of(Review.class).findLast(callback);
+    }
+
+    public static List<Review> find(DataQueryBuilder queryBuilder) {
+        return Backendless.Data.of(Review.class).find(queryBuilder);
+    }
+
+    public static void findAsync(DataQueryBuilder queryBuilder, AsyncCallback<List<Review>> callback) {
+        Backendless.Data.of(Review.class).find(queryBuilder, callback);
+    }
+
+    public String getReview() {
+        return review;
+    }
+
+    public void setReview(String review) {
+        this.review = review;
+    }
+
+    public Double getRating() {
+        return rating;
+    }
+
+    public void setRating(Double rating) {
+        this.rating = rating;
+    }
+
+    public Review save() {
+        return Backendless.Data.of(Review.class).save(this);
+    }
+
+    public void saveAsync(AsyncCallback<Review> callback) {
+        Backendless.Data.of(Review.class).save(this, callback);
+    }
+
+    public Long remove() {
+        return Backendless.Data.of(Review.class).remove(this);
+    }
+
+    public void removeAsync(AsyncCallback<Long> callback) {
+        Backendless.Data.of(Review.class).remove(this, callback);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/Category.java	(date 1586630154000)
+++ app/src/main/java/com/application/arenda/Entities/Models/Category.java	(date 1586630154000)
@@ -0,0 +1,43 @@
+package com.application.arenda.Entities.Models;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+
+import java.util.Date;
+import java.util.Map;
+
+public class Category extends BackendlessTable {
+    private String name = "";
+    private String iconUri = "";
+
+    public static Category convertFromMap(@NonNull Context context, @NonNull Map map) {
+        if (map == null)
+            return null;
+
+        Category category = new Category();
+        category.setObjectId(String.valueOf(map.get("objectId")));
+        category.setCreated((Date) map.get("created"));
+        category.setUpdated((Date) map.get("updated"));
+        category.setName(String.valueOf(map.get("name")));
+        category.setIconUri(String.valueOf(map.get("iconUri")));
+
+        return category;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public String getIconUri() {
+        return iconUri;
+    }
+
+    public void setIconUri(String uri) {
+        this.iconUri = uri;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/Subcategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/Subcategory.java	(date 1586630140000)
+++ app/src/main/java/com/application/arenda/Entities/Models/Subcategory.java	(date 1586630140000)
@@ -0,0 +1,33 @@
+package com.application.arenda.Entities.Models;
+
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+
+import java.util.Date;
+import java.util.Map;
+
+public class Subcategory extends BackendlessTable {
+    private String name = "";
+
+    public static Subcategory convertFromMap(@NonNull Context context, @NonNull Map map) {
+        if (map == null)
+            return null;
+
+        Subcategory subcategory = new Subcategory();
+        subcategory.setObjectId(String.valueOf(map.get("objectId")));
+        subcategory.setCreated((Date) map.get("created"));
+        subcategory.setUpdated((Date) map.get("updated"));
+        subcategory.setName(String.valueOf(map.get("name")));
+
+        return subcategory;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/Announcement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/Announcement.java	(date 1586676134000)
+++ app/src/main/java/com/application/arenda/Entities/Models/Announcement.java	(date 1586676134000)
@@ -0,0 +1,194 @@
+package com.application.arenda.Entities.Models;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class Announcement extends BackendlessTable {
+    private String name = "";
+    private String address = "";
+    private String description = "";
+
+    private List<Map> subcategories = new ArrayList<>();
+
+    private Integer countRent = 0;
+    private Integer countViewers = 0;
+    private Integer countFavorites = 0;
+
+    private String phone_1 = "";
+    private String phone_2 = "";
+    private String phone_3 = "";
+
+    private Double costToBYN = 0.0;
+    private Double costToUSD = 0.0;
+    private Double costToEUR = 0.0;
+
+    private Double profit = 0.0;
+    private Double rating = 0.0;
+
+    private String statusControl = "";
+    private Boolean statusRent = false;
+
+    public static Map convertToMap(Announcement announcement) {
+        Map<String, Object> map = new HashMap();
+
+        if(announcement == null)
+            return map;
+
+//        map.put("ownerId", announcement.getOwnerId());
+
+        map.put("name", announcement.getName());
+        map.put("address", announcement.getAddress());
+        map.put("description", announcement.getDescription());
+
+        map.put("phone_1", announcement.getPhone_1());
+        map.put("phone_2", announcement.getPhone_2());
+        map.put("phone_3", announcement.getPhone_3());
+
+        map.put("costToBYN", announcement.getCostToBYN());
+        map.put("costToUSD", announcement.getCostToUSD());
+        map.put("costToEUR", announcement.getCostToEUR());
+
+        return map;
+    }
+
+    public List<Map> getSubcategories() {
+        return subcategories;
+    }
+
+    public void addSubcategory(String idSubcategory) {
+        Map<String, Object> map = new HashMap<>();
+        map.put("objectId", idSubcategory);
+
+        subcategories.add(map);
+    }
+
+    public String getPhone_2() {
+        return phone_2;
+    }
+
+    public void setPhone_2(String phone_2) {
+        this.phone_2 = phone_2;
+    }
+
+    public Boolean getStatusRent() {
+        return statusRent;
+    }
+
+    public void setStatusRent(Boolean statusRent) {
+        this.statusRent = statusRent;
+    }
+
+    public String getAddress() {
+        return address;
+    }
+
+    public void setAddress(String address) {
+        this.address = address;
+    }
+
+    public Integer getCountRent() {
+        return countRent;
+    }
+
+    public void setCountRent(Integer countRent) {
+        this.countRent = countRent;
+    }
+
+    public Double getCostToUSD() {
+        return costToUSD;
+    }
+
+    public void setCostToUSD(Double costToUSD) {
+        this.costToUSD = costToUSD;
+    }
+
+    public Integer getCountFavorites() {
+        return countFavorites;
+    }
+
+    public void setCountFavorites(Integer countFavorites) {
+        this.countFavorites = countFavorites;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public Integer getCountViewers() {
+        return countViewers;
+    }
+
+    public void setCountViewers(Integer countViewers) {
+        this.countViewers = countViewers;
+    }
+
+    public String getPhone_1() {
+        return phone_1;
+    }
+
+    public void setPhone_1(String phone_1) {
+        this.phone_1 = phone_1;
+    }
+
+    public String getStatusControl() {
+        return statusControl;
+    }
+
+    public void setStatusControl(String statusControl) {
+        this.statusControl = statusControl;
+    }
+
+    public String getPhone_3() {
+        return phone_3;
+    }
+
+    public void setPhone_3(String phone_3) {
+        this.phone_3 = phone_3;
+    }
+
+    public Double getCostToEUR() {
+        return costToEUR;
+    }
+
+    public void setCostToEUR(Double costToEUR) {
+        this.costToEUR = costToEUR;
+    }
+
+    public Double getCostToBYN() {
+        return costToBYN;
+    }
+
+    public void setCostToBYN(Double costToBYN) {
+        this.costToBYN = costToBYN;
+    }
+
+    public Double getProfit() {
+        return profit;
+    }
+
+    public void setProfit(Double profit) {
+        this.profit = profit;
+    }
+
+    public Double getRating() {
+        return rating;
+    }
+
+    public void setRating(Double rating) {
+        this.rating = rating;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/BackendlessTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/BackendlessTable.java	(date 1586644525000)
+++ app/src/main/java/com/application/arenda/Entities/Models/BackendlessTable.java	(date 1586644525000)
@@ -0,0 +1,57 @@
+package com.application.arenda.Entities.Models;
+
+import androidx.annotation.NonNull;
+
+import java.io.Serializable;
+import java.util.Date;
+
+public abstract class BackendlessTable implements Serializable {
+    private String objectId = "";
+    private String ownerId = "";
+
+    private Date created;
+    private Date updated;
+
+    public String getObjectId() {
+        return objectId;
+    }
+
+    public void setObjectId(String objectId) {
+        this.objectId = objectId;
+    }
+
+    public String getOwnerId() {
+        return ownerId;
+    }
+
+    public void setOwnerId(String ownerId) {
+        this.ownerId = ownerId;
+    }
+
+    public Date getCreated() {
+        return created;
+    }
+
+    public void setCreated(Date created) {
+        this.created = created;
+    }
+
+    public Date getUpdated() {
+        return updated;
+    }
+
+    public void setUpdated(Date updated) {
+        this.updated = updated;
+    }
+
+    @NonNull
+    @Override
+    public String toString() {
+        return "BackendlessTable{" +
+                "objectId='" + objectId + '\'' +
+                ", ownerId='" + ownerId + '\'' +
+                ", created=" + created +
+                ", updated=" + updated +
+                '}';
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/FavoriteAnnouncement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/FavoriteAnnouncement.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/Models/FavoriteAnnouncement.java	(date 1586625309000)
@@ -0,0 +1,67 @@
+package com.application.arenda.Entities.Models;
+
+import com.backendless.Backendless;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.persistence.DataQueryBuilder;
+
+import java.util.List;
+
+public class FavoriteAnnouncement extends BackendlessTable {
+    private Boolean isFavorite = false;
+
+    public static FavoriteAnnouncement findById(String id) {
+        return Backendless.Data.of(FavoriteAnnouncement.class).findById(id);
+    }
+
+    public static void findByIdAsync(String id, AsyncCallback<FavoriteAnnouncement> callback) {
+        Backendless.Data.of(FavoriteAnnouncement.class).findById(id, callback);
+    }
+
+    public static FavoriteAnnouncement findFirst() {
+        return Backendless.Data.of(FavoriteAnnouncement.class).findFirst();
+    }
+
+    public static void findFirstAsync(AsyncCallback<FavoriteAnnouncement> callback) {
+        Backendless.Data.of(FavoriteAnnouncement.class).findFirst(callback);
+    }
+
+    public static FavoriteAnnouncement findLast() {
+        return Backendless.Data.of(FavoriteAnnouncement.class).findLast();
+    }
+
+    public static void findLastAsync(AsyncCallback<FavoriteAnnouncement> callback) {
+        Backendless.Data.of(FavoriteAnnouncement.class).findLast(callback);
+    }
+
+    public static List<FavoriteAnnouncement> find(DataQueryBuilder queryBuilder) {
+        return Backendless.Data.of(FavoriteAnnouncement.class).find(queryBuilder);
+    }
+
+    public static void findAsync(DataQueryBuilder queryBuilder, AsyncCallback<List<FavoriteAnnouncement>> callback) {
+        Backendless.Data.of(FavoriteAnnouncement.class).find(queryBuilder, callback);
+    }
+
+    public Boolean isFavorite() {
+        return isFavorite;
+    }
+
+    public void setIsFavorite(Boolean isFavorite) {
+        this.isFavorite = isFavorite;
+    }
+
+    public FavoriteAnnouncement save() {
+        return Backendless.Data.of(FavoriteAnnouncement.class).save(this);
+    }
+
+    public void saveAsync(AsyncCallback<FavoriteAnnouncement> callback) {
+        Backendless.Data.of(FavoriteAnnouncement.class).save(this, callback);
+    }
+
+    public Long remove() {
+        return Backendless.Data.of(FavoriteAnnouncement.class).remove(this);
+    }
+
+    public void removeAsync(AsyncCallback<Long> callback) {
+        Backendless.Data.of(FavoriteAnnouncement.class).remove(this, callback);
+    }
+}
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelUser.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelUser.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelUser.java	(date 0)
@@ -1,105 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-import com.application.arenda.Entities.User.AccountType;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class ModelUser implements IModel {
-    private long id = 0;
-
-    private String name = "";
-    private String lastName = "";
-
-    private String email = "";
-    private String userPhoto = "";
-
-    private List<ModelAddress> addresses = new ArrayList<>();
-    private List<ModelPhoneNumber> phoneNumbers = new ArrayList<>();
-
-    private AccountType accountType;
-    private float balance = 0.0f;
-    private float rating = 0.0f;
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getLastName() {
-        return lastName;
-    }
-
-    public void setLastName(String lastName) {
-        this.lastName = lastName;
-    }
-
-    public String getEmail() {
-        return email;
-    }
-
-    public void setEmail(String email) {
-        this.email = email;
-    }
-
-    public String getUserPhoto() {
-        return userPhoto;
-    }
-
-    public void setUserPhoto(String userPhoto) {
-        this.userPhoto = userPhoto;
-    }
-
-    public List<ModelAddress> getAddresses() {
-        return addresses;
-    }
-
-    public void setAddresses(List<ModelAddress> addresses) {
-        this.addresses = addresses;
-    }
-
-    public List<ModelPhoneNumber> getPhoneNumbers() {
-        return phoneNumbers;
-    }
-
-    public void setPhoneNumbers(List<ModelPhoneNumber> phoneNumbers) {
-        this.phoneNumbers = phoneNumbers;
-    }
-
-    public AccountType getAccountType() {
-        return accountType;
-    }
-
-    public void setAccountType(AccountType accountType) {
-        this.accountType = accountType;
-    }
-
-    public float getBalance() {
-        return balance;
-    }
-
-    public void setBalance(float balance) {
-        this.balance = balance;
-    }
-
-    public float getRating() {
-        return rating;
-    }
-
-    public void setRating(float rating) {
-        this.rating = rating;
-    }
-
-    @Override
-    public long getID() {
-        return id;
-    }
-
-    @Override
-    public void setID(long id) {
-        this.id = id;
-    }
-}
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelCategory.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelCategory.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelCategory.java	(date 0)
@@ -1,43 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-public class ModelCategory implements IModel {
-    private long idCategories = 0;
-
-    private String iconUri;
-    private String name = "";
-
-    public ModelCategory() {
-    }
-
-    public ModelCategory(long idCategories, String iconUri, String name) {
-        this.idCategories = idCategories;
-        this.iconUri = iconUri;
-        this.name = name;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getIconUri() {
-        return iconUri;
-    }
-
-    public void setIconUri(String uri) {
-        this.iconUri = uri;
-    }
-
-    @Override
-    public long getID() {
-        return idCategories;
-    }
-
-    @Override
-    public void setID(long id) {
-        this.idCategories = id;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelSubcategory.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelSubcategory.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelSubcategory.java	(date 0)
@@ -1,43 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-public class ModelSubcategory implements IModel {
-    private long id;
-
-    private long idCategory;
-    private String name;
-
-    public ModelSubcategory() {
-    }
-
-    public ModelSubcategory(long id, long idCategory, String name) {
-        this.id = id;
-        this.idCategory = idCategory;
-        this.name = name;
-    }
-
-    public long getIdCategory() {
-        return idCategory;
-    }
-
-    public void setIdCategory(long idCategory) {
-        this.idCategory = idCategory;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    @Override
-    public void setID(long id) {
-        this.id = id;
-    }
-
-    @Override
-    public long getID() {
-        return id;
-    }
-}
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelAllAnnouncement.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelAllAnnouncement.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelAllAnnouncement.java	(date 0)
@@ -1,141 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-import android.net.Uri;
-
-import com.google.gson.annotations.SerializedName;
-
-public class ModelAllAnnouncement implements IModel {
-    @SerializedName("name")
-    private String name = "";
-
-    @SerializedName("rating")
-    private float rate = 0;
-
-    @SerializedName("countRent")
-    private int countRent = 0;
-
-    @SerializedName("placementDate")
-    private String placementDate;
-
-    @SerializedName("idUser")
-    private long idUser = 0;
-
-    @SerializedName("idAnnouncement")
-    private long idAnnouncement = 0;
-
-    @SerializedName("isFavorite")
-    private boolean isFavorite = false;
-
-    @SerializedName("costToBYN")
-    private float costToBYN = 0.0f;
-
-    @SerializedName("costToUSD")
-    private float costToUSD = 0.0f;
-
-    @SerializedName("costToEUR")
-    private float costToEUR = 0.0f;
-
-    @SerializedName("photoPath")
-    private Uri mainUriBitmap;
-
-    @SerializedName("address")
-    private String address = "";
-
-    public Uri getMainUriBitmap() {
-        return mainUriBitmap;
-    }
-
-    public void setMainUriBitmap(Uri mainUriBitmap) {
-        this.mainUriBitmap = mainUriBitmap;
-    }
-
-    public boolean isFavorite() {
-        return isFavorite;
-    }
-
-    public void setFavorite(boolean favorite) {
-        isFavorite = favorite;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public float getRate() {
-        return rate;
-    }
-
-    public void setRate(float rate) {
-        this.rate = rate;
-    }
-
-    public int getCountRent() {
-        return countRent;
-    }
-
-    public void setCountRent(int countRent) {
-        this.countRent = countRent;
-    }
-
-    public String getPlacementDate() {
-        return placementDate;
-    }
-
-    public void setPlacementDate(String placementDate) {
-        this.placementDate = placementDate;
-    }
-
-    public long getIdUser() {
-        return idUser;
-    }
-
-    public void setIdUser(long idUser) {
-        this.idUser = idUser;
-    }
-
-    public float getCostToBYN() {
-        return costToBYN;
-    }
-
-    public void setCostToBYN(float costToBYN) {
-        this.costToBYN = costToBYN;
-    }
-
-    public float getCostToUSD() {
-        return costToUSD;
-    }
-
-    public void setCostToUSD(float costToUSD) {
-        this.costToUSD = costToUSD;
-    }
-
-    public float getCostToEUR() {
-        return costToEUR;
-    }
-
-    public void setCostToEUR(float costToEUR) {
-        this.costToEUR = costToEUR;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    @Override
-    public void setID(long id) {
-        idAnnouncement = id;
-    }
-
-    @Override
-    public long getID() {
-        return idAnnouncement;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/IModel.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/IModel.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/IModel.java	(date 0)
@@ -1,6 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-public interface IModel {
-    void setID(long id);
-    long getID();
-}
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelViewAnnouncement.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelViewAnnouncement.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelViewAnnouncement.java	(date 0)
@@ -1,162 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-import android.net.Uri;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class ModelViewAnnouncement implements IModel {
-    private long idUser = 0;
-    private long idAnnouncement = 0;
-
-    private String name = "";
-    private String description = "";
-    private int idSubcategory = 0;
-
-    private boolean isFavorite = false;
-
-    private float rate = 0;
-    private int countRent = 0;
-    private boolean statusRent = false;
-
-    private float costToBYN = 0.0f;
-    private float costToUSD = 0.0f;
-    private float costToEUR = 0.0f;
-
-    private String address = "";
-    private String placementDate = "";
-
-    private List<ModelPhoneNumber> phoneNumbers = new ArrayList<>();
-
-    private List<Uri> uriCollection = new ArrayList<>();
-
-    public long getIdUser() {
-        return idUser;
-    }
-
-    public void setIdUser(long idUser) {
-        this.idUser = idUser;
-    }
-
-    public boolean isFavorite() {
-        return isFavorite;
-    }
-
-    public void setFavorite(boolean favorite) {
-        isFavorite = favorite;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public int getIdSubcategory() {
-        return idSubcategory;
-    }
-
-    public void setIdSubcategory(int idSubcategory) {
-        this.idSubcategory = idSubcategory;
-    }
-
-    public float getRate() {
-        return rate;
-    }
-
-    public void setRate(float rate) {
-        this.rate = rate;
-    }
-
-    public int getCountRent() {
-        return countRent;
-    }
-
-    public void setCountRent(int countRent) {
-        this.countRent = countRent;
-    }
-
-    public boolean isStatusRent() {
-        return statusRent;
-    }
-
-    public void setStatusRent(boolean statusRent) {
-        this.statusRent = statusRent;
-    }
-
-    public float getCostToBYN() {
-        return costToBYN;
-    }
-
-    public void setCostToBYN(float costToBYN) {
-        this.costToBYN = costToBYN;
-    }
-
-    public float getCostToUSD() {
-        return costToUSD;
-    }
-
-    public void setCostToUSD(float costToUSD) {
-        this.costToUSD = costToUSD;
-    }
-
-    public float getCostToEUR() {
-        return costToEUR;
-    }
-
-    public void setCostToEUR(float costToEUR) {
-        this.costToEUR = costToEUR;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    public List<Uri> getUriCollection() {
-        return uriCollection;
-    }
-
-    public void setUriCollection(List<Uri> uriCollection) {
-        this.uriCollection = uriCollection;
-    }
-
-    public String getPlacementDate() {
-        return placementDate;
-    }
-
-    public void setPlacementDate(String placementDate) {
-        this.placementDate = placementDate;
-    }
-
-    public List<ModelPhoneNumber> getPhoneNumbers() {
-        return phoneNumbers;
-    }
-
-    public void setPhoneNumbers(List<ModelPhoneNumber> phoneNumbers) {
-        this.phoneNumbers = phoneNumbers;
-    }
-
-    @Override
-    public long getID() {
-        return idAnnouncement;
-    }
-
-    @Override
-    public void setID(long id) {
-        idAnnouncement = id;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelUserAnnouncement.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelUserAnnouncement.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelUserAnnouncement.java	(date 0)
@@ -1,140 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-import android.graphics.Bitmap;
-import android.net.Uri;
-
-public class ModelUserAnnouncement implements IModel {
-    private String name = "";
-
-    private float rate = 0;
-    private int countRent = 0;
-    private int countViewers = 0;
-    private int countFavorites = 0;
-    private String placementDate;
-
-    private long idUser = 0;
-    private long idAnnouncement = 0;
-
-    private float costToBYN = 0.0f;
-    private float costToUSD = 0.0f;
-    private float costToEUR = 0.0f;
-
-    private Bitmap bitmap;
-    private Uri mainUriBitmap;
-
-    private String address = "";
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public float getRate() {
-        return rate;
-    }
-
-    public void setRate(float rate) {
-        this.rate = rate;
-    }
-
-    public int getCountRent() {
-        return countRent;
-    }
-
-    public void setCountRent(int countRent) {
-        this.countRent = countRent;
-    }
-
-    public int getCountViewers() {
-        return countViewers;
-    }
-
-    public void setCountViewers(int countViewers) {
-        this.countViewers = countViewers;
-    }
-
-    public int getCountFavorites() {
-        return countFavorites;
-    }
-
-    public void setCountFavorites(int countFavorites) {
-        this.countFavorites = countFavorites;
-    }
-
-    public String getPlacementDate() {
-        return placementDate;
-    }
-
-    public void setPlacementDate(String placementDate) {
-        this.placementDate = placementDate;
-    }
-
-    public long getIdUser() {
-        return idUser;
-    }
-
-    public void setIdUser(long idUser) {
-        this.idUser = idUser;
-    }
-
-    public float getCostToBYN() {
-        return costToBYN;
-    }
-
-    public void setCostToBYN(float costToBYN) {
-        this.costToBYN = costToBYN;
-    }
-
-    public float getCostToUSD() {
-        return costToUSD;
-    }
-
-    public void setCostToUSD(float costToUSD) {
-        this.costToUSD = costToUSD;
-    }
-
-    public float getCostToEUR() {
-        return costToEUR;
-    }
-
-    public void setCostToEUR(float costToEUR) {
-        this.costToEUR = costToEUR;
-    }
-
-    public Bitmap getBitmap() {
-        return bitmap;
-    }
-
-    public void setBitmap(Bitmap bitmap) {
-        this.bitmap = bitmap;
-    }
-
-    public Uri getMainUriBitmap() {
-        return mainUriBitmap;
-    }
-
-    public void setMainUriBitmap(Uri mainUriBitmap) {
-        this.mainUriBitmap = mainUriBitmap;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    @Override
-    public void setID(long id) {
-        idAnnouncement = id;
-    }
-
-    @Override
-    public long getID() {
-        return idAnnouncement;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelPhoneNumber.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelPhoneNumber.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelPhoneNumber.java	(date 0)
@@ -1,26 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-public class ModelPhoneNumber implements IModel {
-    private long id;
-
-    private String number = "";
-
-    public ModelPhoneNumber(long id, String number) {
-        this.id = id;
-        this.number = number;
-    }
-
-    public String getNumber() {
-        return number;
-    }
-
-    @Override
-    public long getID() {
-        return id;
-    }
-
-    @Override
-    public void setID(long id) {
-        this.id = id;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelInsertAnnouncement.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelInsertAnnouncement.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelInsertAnnouncement.java	(date 0)
@@ -1,161 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-import android.net.Uri;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class ModelInsertAnnouncement implements IModel {
-    private String name = "";
-    private String description = "";
-
-    private int idSubcategory = 0;
-    private long idAnnouncement = 0;
-
-    private float costToBYN = 0.0f;
-    private float costToUSD = 0.0f;
-    private float costToEUR = 0.0f;
-
-    private Uri mainUriBitmap;
-    private List<Uri> urisBitmap = new ArrayList<>();
-
-    private String address = "";
-
-    private String phone_1 = "";
-    private String phone_2 = "";
-    private String phone_3 = "";
-
-    private boolean visiblePhone_1 = false;
-    private boolean visiblePhone_2 = false;
-    private boolean visiblePhone_3 = false;
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    public String getDescription() {
-        return description;
-    }
-
-    public void setDescription(String description) {
-        this.description = description;
-    }
-
-    public int getIdSubcategory() {
-        return idSubcategory;
-    }
-
-    public void setIdSubcategory(int idSubcategory) {
-        this.idSubcategory = idSubcategory;
-    }
-
-    public float getCostToBYN() {
-        return costToBYN;
-    }
-
-    public void setCostToBYN(float costToBYN) {
-        this.costToBYN = costToBYN;
-    }
-
-    public float getCostToUSD() {
-        return costToUSD;
-    }
-
-    public void setCostToUSD(float costToUSD) {
-        this.costToUSD = costToUSD;
-    }
-
-    public float getCostToEUR() {
-        return costToEUR;
-    }
-
-    public void setCostToEUR(float costToEUR) {
-        this.costToEUR = costToEUR;
-    }
-
-    public List<Uri> getUrisBitmap() {
-        return urisBitmap;
-    }
-
-    public void setUrisBitmap(List<Uri> urisBitmap) {
-        this.urisBitmap = urisBitmap;
-    }
-
-    public Uri getMainUriBitmap() {
-        return mainUriBitmap;
-    }
-
-    public void setMainUriBitmap(Uri mainUriBitmap) {
-        this.mainUriBitmap = mainUriBitmap;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    public void setAddress(String address) {
-        this.address = address;
-    }
-
-    public String getPhone_1() {
-        return phone_1;
-    }
-
-    public void setPhone_1(String phone_1) {
-        this.phone_1 = phone_1;
-    }
-
-    public String getPhone_2() {
-        return phone_2;
-    }
-
-    public void setPhone_2(String phone_2) {
-        this.phone_2 = phone_2;
-    }
-
-    public String getPhone_3() {
-        return phone_3;
-    }
-
-    public void setPhone_3(String phone_3) {
-        this.phone_3 = phone_3;
-    }
-
-    public boolean isVisiblePhone_1() {
-        return visiblePhone_1;
-    }
-
-    public void setVisiblePhone_1(boolean visiblePhone_1) {
-        this.visiblePhone_1 = visiblePhone_1;
-    }
-
-    public boolean isVisiblePhone_2() {
-        return visiblePhone_2;
-    }
-
-    public void setVisiblePhone_2(boolean visiblePhone_2) {
-        this.visiblePhone_2 = visiblePhone_2;
-    }
-
-    public boolean isVisiblePhone_3() {
-        return visiblePhone_3;
-    }
-
-    public void setVisiblePhone_3(boolean visiblePhone_3) {
-        this.visiblePhone_3 = visiblePhone_3;
-    }
-
-    @Override
-    public long getID() {
-        return idAnnouncement;
-    }
-
-    @Override
-    public void setID(long id) {
-        idAnnouncement = id;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Models/ModelAddress.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Models/ModelAddress.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Models/ModelAddress.java	(date 0)
@@ -1,26 +0,0 @@
-package com.application.arenda.Entities.Models;
-
-public class ModelAddress implements IModel {
-    private long id = 0;
-
-    private String address = "";
-
-    public ModelAddress(long id, String address) {
-        this.id = id;
-        this.address = address;
-    }
-
-    public String getAddress() {
-        return address;
-    }
-
-    @Override
-    public void setID(long id) {
-        this.id = id;
-    }
-
-    @Override
-    public long getID() {
-        return id;
-    }
-}
Index: app/src/main/java/com/application/arenda/Entities/RecyclerView/RVAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/RecyclerView/RVAdapter.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/RecyclerView/RVAdapter.java	(date 1586625309000)
@@ -1,10 +1,10 @@
 package com.application.arenda.Entities.RecyclerView;
 
-import com.application.arenda.Entities.Models.IModel;
+import com.application.arenda.Entities.Models.BackendlessTable;
 
 import java.util.List;
 
-public interface RVAdapter<M extends IModel> {
+public interface RVAdapter<M extends BackendlessTable> {
     boolean isLoading();
 
     void setLoading(boolean b);
Index: app/src/main/java/com/application/arenda/Entities/RecyclerView/BaseAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/RecyclerView/BaseAdapter.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/RecyclerView/BaseAdapter.java	(date 1586625309000)
@@ -2,12 +2,12 @@
 
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.application.arenda.Entities.Models.IModel;
+import com.application.arenda.Entities.Models.BackendlessTable;
 
 import java.util.ArrayList;
 import java.util.List;
 
-public abstract class BaseAdapter<M extends IModel, V extends BaseViewHolder> extends RecyclerView.Adapter<V> implements RVAdapter<M> {
+public abstract class BaseAdapter<M extends BackendlessTable, V extends BaseViewHolder> extends RecyclerView.Adapter<V> implements RVAdapter<M> {
     private boolean isLoading = false;
 
     private List<M> collection = new ArrayList<>();
Index: app/src/main/java/com/application/arenda/Entities/RecyclerView/OnItemClick.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/RecyclerView/OnItemClick.java	(date 1586625308000)
+++ app/src/main/java/com/application/arenda/Entities/RecyclerView/OnItemClick.java	(date 1586625308000)
@@ -2,8 +2,8 @@
 
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.application.arenda.Entities.Models.IModel;
+import com.application.arenda.Entities.Models.BackendlessTable;
 
 public interface OnItemClick {
-    void onClick(RecyclerView.ViewHolder viewHolder, IModel model);
+    void onClick(RecyclerView.ViewHolder viewHolder, BackendlessTable model);
 }
Index: app/src/main/java/com/application/arenda/Entities/RecyclerView/LoadMoreData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/RecyclerView/LoadMoreData.java	(date 1586477370000)
+++ app/src/main/java/com/application/arenda/Entities/RecyclerView/LoadMoreData.java	(date 1586477370000)
@@ -1,5 +1,5 @@
 package com.application.arenda.Entities.RecyclerView;
 
 public interface LoadMoreData {
-    void loadMore(long lastID);
+    void loadMore(String lastID);
 }
Index: app/src/main/java/com/application/arenda/Entities/RecyclerView/BaseViewHolder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/RecyclerView/BaseViewHolder.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/RecyclerView/BaseViewHolder.java	(date 1586625309000)
@@ -5,7 +5,7 @@
 import androidx.annotation.NonNull;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.application.arenda.Entities.Models.IModel;
+import com.application.arenda.Entities.Models.BackendlessTable;
 
 public abstract class BaseViewHolder extends RecyclerView.ViewHolder {
     public BaseViewHolder(@NonNull View itemView) {
@@ -14,5 +14,5 @@
 
     public abstract int getResourceLayoutId();
 
-    public abstract void onBind(IModel model, int position);
+    public abstract void onBind(BackendlessTable model, int position);
 }
Index: app/src/main/java/com/application/arenda/Entities/RecyclerView/RVOnScrollListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/RecyclerView/RVOnScrollListener.java	(date 1586522133000)
+++ app/src/main/java/com/application/arenda/Entities/RecyclerView/RVOnScrollListener.java	(date 1586522133000)
@@ -55,9 +55,9 @@
 
         if (!rvAdapter.isLoading() && (currentVisibleItems + firstVisibleItem) >= totalItems - countIgnoreItem && firstVisibleItem >= 0) {
             System.out.println("Status: " + currentVisibleItems + " + " + firstVisibleItem + " >= " + (totalItems - countIgnoreItem) + " && " + firstVisibleItem + ">= 0");
-            System.out.println("LastItemID: " + rvAdapter.getLastItem().getID());
+            System.out.println("LastItemID: " + rvAdapter.getLastItem().getObjectId());
 
-            loadMoreData.loadMore(rvAdapter.getLastItem().getID());
+            loadMoreData.loadMore(rvAdapter.getLastItem().getObjectId());
         }
 
         if (scrollCallBack != null && lastVisibleItem == totalItems)
Index: app/src/main/java/com/application/arenda/Entities/Announcements/Categories/EventSendID.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/Categories/EventSendID.java	(date 1586673742000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/Categories/EventSendID.java	(date 1586673742000)
@@ -0,0 +1,30 @@
+package com.application.arenda.Entities.Announcements.Categories;
+
+import org.greenrobot.eventbus.Subscribe;
+
+public class EventSendID {
+    private String idSubcategory;
+    private String name;
+
+    public EventSendID(String idSubcategory, String name) {
+        this.idSubcategory = idSubcategory;
+        this.name = name;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    @Subscribe
+    public void setSelectedSubcategory(String idSubcategory) {
+        this.idSubcategory = idSubcategory;
+    }
+
+    public String getIdSubcategory() {
+        return idSubcategory;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/Categories/CategoriesVH.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/Categories/CategoriesVH.java	(date 1586673742000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/Categories/CategoriesVH.java	(date 1586673742000)
@@ -0,0 +1,85 @@
+package com.application.arenda.Entities.Announcements.Categories;
+
+import android.net.Uri;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.ImageView;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+import androidx.recyclerview.widget.RecyclerView;
+
+import com.application.arenda.Entities.Models.BackendlessTable;
+import com.application.arenda.Entities.Models.Category;
+import com.application.arenda.Entities.RecyclerView.BaseViewHolder;
+import com.application.arenda.Entities.Utils.Glide.GlideUtils;
+import com.application.arenda.R;
+import com.github.florent37.expansionpanel.ExpansionLayout;
+
+import org.jetbrains.annotations.Nullable;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class CategoriesVH extends BaseViewHolder {
+    @Nullable
+    @BindView(R.id.categoryTitle)
+    TextView categoryTitle;
+
+    @Nullable
+    @BindView(R.id.categoryIcon)
+    ImageView categoryIcon;
+
+    @Nullable
+    @BindView(R.id.rvItemCategory)
+    RecyclerView rvItemCategory;
+
+    @Nullable
+    @BindView(R.id.categoryExpansionLayout)
+    ExpansionLayout categoryExpansionLayout;
+
+
+    private Category category;
+
+    public CategoriesVH(@NonNull View itemView) {
+        super(itemView);
+        ButterKnife.bind(this, itemView);
+    }
+
+    public static CategoriesVH create(ViewGroup parent) {
+        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.vh_category_item, parent, false);
+        return new CategoriesVH(view);
+    }
+
+    @Override
+    public int getResourceLayoutId() {
+        return R.layout.vh_category_item;
+    }
+
+    @Override
+    public void onBind(BackendlessTable model, int position) {
+        categoryExpansionLayout.collapse(false);
+
+        category = (Category) model;
+
+        categoryTitle.setText(category.getName());
+
+        GlideUtils.loadVector(itemView.getContext(), Uri.parse(category.getIconUri()), categoryIcon);
+    }
+
+    public ExpansionLayout getCategoryExpansionLayout() {
+        return categoryExpansionLayout;
+    }
+
+    public void setOnClickListener(OnClickItemCategory listener) {
+        categoryExpansionLayout.addListener((expansionLayout, expanded) -> {
+            if (expanded)
+                listener.inflateRecyclerViewOnClick(category.getObjectId(), rvItemCategory);
+        });
+    }
+
+    public interface OnClickItemCategory {
+        void inflateRecyclerViewOnClick(String idCategory, RecyclerView rvItemCategory);
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/Categories/SubcategoryVH.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/Categories/SubcategoryVH.java	(date 1586673742000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/Categories/SubcategoryVH.java	(date 1586673742000)
@@ -0,0 +1,63 @@
+package com.application.arenda.Entities.Announcements.Categories;
+
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import androidx.annotation.NonNull;
+
+import com.application.arenda.Entities.Models.BackendlessTable;
+import com.application.arenda.Entities.Models.Subcategory;
+import com.application.arenda.Entities.RecyclerView.BaseViewHolder;
+import com.application.arenda.Entities.RecyclerView.OnItemClick;
+import com.application.arenda.R;
+
+import org.jetbrains.annotations.Nullable;
+
+import butterknife.BindView;
+import butterknife.ButterKnife;
+
+public class SubcategoryVH extends BaseViewHolder {
+    @Nullable
+    @BindView(R.id.subcategoryTitle)
+    TextView subcategoryTitle;
+
+    private Subcategory subcategory;
+
+    public SubcategoryVH(@NonNull View itemView) {
+        super(itemView);
+
+        ButterKnife.bind(this, itemView);
+    }
+
+    public static SubcategoryVH create(ViewGroup parent) {
+        LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
+        View view = layoutInflater.inflate(R.layout.vh_subcategory_item, parent, false);
+        return new SubcategoryVH(view);
+    }
+
+    @Override
+    public int getResourceLayoutId() {
+        return R.layout.vh_subcategory_item;
+    }
+
+    @Override
+    public void onBind(BackendlessTable model, int position) {
+        subcategory = (Subcategory) model;
+
+        subcategoryTitle.setText(subcategory.getName());
+    }
+
+    public String getIdSubcategory() {
+        return subcategory.getObjectId();
+    }
+
+    public String getIdCategory() {
+        return subcategory.getObjectId();
+    }
+
+    public void setOnClickListener(OnItemClick itemClick){
+        itemView.setOnClickListener(v -> itemClick.onClick(SubcategoryVH.this, subcategory));
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/Categories/CategoriesAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/Categories/CategoriesAdapter.java	(date 1586673742000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/Categories/CategoriesAdapter.java	(date 1586673742000)
@@ -0,0 +1,40 @@
+package com.application.arenda.Entities.Announcements.Categories;
+
+import android.view.ViewGroup;
+
+import androidx.annotation.NonNull;
+
+import com.application.arenda.Entities.Models.Category;
+import com.application.arenda.Entities.RecyclerView.BaseAdapter;
+import com.github.florent37.expansionpanel.viewgroup.ExpansionLayoutCollection;
+
+public class CategoriesAdapter extends BaseAdapter<Category, CategoriesVH> {
+    private final ExpansionLayoutCollection expansionLayoutCollection;
+
+    private CategoriesVH.OnClickItemCategory listener;
+
+    public CategoriesAdapter() {
+        expansionLayoutCollection = new ExpansionLayoutCollection();
+        expansionLayoutCollection.openOnlyOne(true);
+    }
+
+    @NonNull
+    @Override
+    public CategoriesVH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        return CategoriesVH.create(parent);
+    }
+
+    @Override
+    public void onBindViewHolder(@NonNull CategoriesVH holder, int position) {
+        holder.onBind(getItem(position), position);
+
+        if (listener != null)
+            holder.setOnClickListener(listener);
+
+        expansionLayoutCollection.add(holder.getCategoryExpansionLayout());
+    }
+
+    public void setOnClickCategory(CategoriesVH.OnClickItemCategory listener) {
+        this.listener = listener;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/Categories/SubcategoriesAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/Categories/SubcategoriesAdapter.java	(date 1586673743000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/Categories/SubcategoriesAdapter.java	(date 1586673743000)
@@ -0,0 +1,31 @@
+package com.application.arenda.Entities.Announcements.Categories;
+
+import android.view.ViewGroup;
+
+import androidx.annotation.NonNull;
+
+import com.application.arenda.Entities.Models.Subcategory;
+import com.application.arenda.Entities.RecyclerView.BaseAdapter;
+import com.application.arenda.Entities.RecyclerView.OnItemClick;
+
+public class SubcategoriesAdapter extends BaseAdapter<Subcategory, SubcategoryVH> {
+    private OnItemClick itemClick;
+
+    @NonNull
+    @Override
+    public SubcategoryVH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
+        return SubcategoryVH.create(parent);
+    }
+
+    @Override
+    public void onBindViewHolder(@NonNull SubcategoryVH holder, int position) {
+        holder.onBind(getItem(position), position);
+
+        if(itemClick != null)
+            holder.setOnClickListener(itemClick);
+    }
+
+    public void setItemClick(OnItemClick itemClick) {
+        this.itemClick = itemClick;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/InsertToFavorite/InsertToFavorite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/InsertToFavorite/InsertToFavorite.java	(date 1586477348000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/InsertToFavorite/InsertToFavorite.java	(date 1586477348000)
@@ -27,7 +27,7 @@
 
 public class InsertToFavorite implements IInsertToFavorite {
     @Override
-    public Observable<Boolean> insertToFavorite(@NonNull Context context, @NonNull String url, long idAnnouncement) {
+    public Observable<Boolean> insertToFavorite(@NonNull Context context, @NonNull String url, String idAnnouncement) {
         return Observable.create(observableEmitter -> {
             StringRequest request = new StringRequest(Request.Method.POST, url, new Response.Listener<String>() {
                 @Override
Index: app/src/main/java/com/application/arenda/Entities/Announcements/InsertToFavorite/IInsertToFavorite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/InsertToFavorite/IInsertToFavorite.java	(date 1586477348000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/InsertToFavorite/IInsertToFavorite.java	(date 1586477348000)
@@ -7,5 +7,5 @@
 import io.reactivex.Observable;
 
 public interface IInsertToFavorite {
-    Observable<Boolean> insertToFavorite(@NonNull Context context, @NonNull String url, long idAnnouncement);
+    Observable<Boolean> insertToFavorite(@NonNull Context context, @NonNull String url, String idAnnouncement);
 }
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogAdapterRV.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogAdapterRV.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogAdapterRV.java	(date 0)
@@ -1,31 +0,0 @@
-package com.application.arenda.Entities.Announcements.ViewAnnouncement.DialogFragment;
-
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-
-import com.application.arenda.Entities.Models.ModelPhoneNumber;
-import com.application.arenda.Entities.RecyclerView.BaseAdapter;
-import com.application.arenda.Entities.RecyclerView.OnItemClick;
-
-public class DialogAdapterRV extends BaseAdapter<ModelPhoneNumber, DialogViewHolderRV> {
-
-    private OnItemClick itemClick;
-
-    public void setOnItemClick(OnItemClick itemClick) {
-        this.itemClick = itemClick;
-    }
-
-    @NonNull
-    @Override
-    public DialogViewHolderRV onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-        return DialogViewHolderRV.create(parent);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull DialogViewHolderRV holder, int position) {
-        holder.onBind(getItem(position), position);
-
-        holder.setOnItemClick(itemClick);
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogViewHolderRV.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogViewHolderRV.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogViewHolderRV.java	(date 0)
@@ -1,61 +0,0 @@
-package com.application.arenda.Entities.Announcements.ViewAnnouncement.DialogFragment;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-
-import com.application.arenda.Entities.Models.IModel;
-import com.application.arenda.Entities.Models.ModelPhoneNumber;
-import com.application.arenda.Entities.RecyclerView.BaseViewHolder;
-import com.application.arenda.Entities.RecyclerView.OnItemClick;
-import com.application.arenda.R;
-
-import org.jetbrains.annotations.Nullable;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
-public class DialogViewHolderRV extends BaseViewHolder {
-
-    @Nullable
-    @BindView(R.id.titlePhoneNumber)
-    TextView titlePhoneNumber;
-
-    private ModelPhoneNumber modelPhoneNumber;
-
-    public DialogViewHolderRV(@NonNull View itemView) {
-        super(itemView);
-
-        ButterKnife.bind(this, itemView);
-    }
-
-    public static DialogViewHolderRV create(ViewGroup parent) {
-        LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
-        View view = layoutInflater.inflate(R.layout.vh_dialog_call_phone_number, parent, false);
-        return new DialogViewHolderRV(view);
-    }
-
-    public void setOnItemClick(OnItemClick itemClick) {
-        if (itemClick != null && modelPhoneNumber != null) {
-            itemView.setOnClickListener(v -> itemClick.onClick(this, modelPhoneNumber));
-        } else {
-            throw new NullPointerException("Model not initialized");
-        }
-    }
-
-    @Override
-    public int getResourceLayoutId() {
-        return R.layout.vh_dialog_call_phone_number;
-    }
-
-    @Override
-    public void onBind(IModel model, int position) {
-        if (model != null) {
-            modelPhoneNumber = ((ModelPhoneNumber) model);
-            titlePhoneNumber.setText(modelPhoneNumber.getNumber());
-        }
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogCallPhoneNumber.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogCallPhoneNumber.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogCallPhoneNumber.java	(date 0)
@@ -1,76 +0,0 @@
-package com.application.arenda.Entities.Announcements.ViewAnnouncement.DialogFragment;
-
-import android.content.Intent;
-import android.net.Uri;
-import android.os.Bundle;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-import androidx.annotation.Nullable;
-import androidx.fragment.app.DialogFragment;
-import androidx.recyclerview.widget.LinearLayoutManager;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.application.arenda.Entities.Models.ModelPhoneNumber;
-import com.application.arenda.Entities.Utils.PermissionUtils;
-import com.application.arenda.R;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-import butterknife.Unbinder;
-
-public class DialogCallPhoneNumber extends DialogFragment {
-    public static String TAG = "CallPhoneNumber";
-    public static short PERMISSION_CODE = 7365;
-
-    @Nullable
-    @BindView(R.id.callPhoneNumberRV)
-    RecyclerView recyclerView;
-
-    private Unbinder unbinder;
-    private Intent intentPhoneNumber;
-
-    private List<ModelPhoneNumber> collection = new ArrayList();
-
-    public DialogCallPhoneNumber(List<ModelPhoneNumber> collection) {
-        this.collection = collection;
-    }
-
-    public void callPhone(ModelPhoneNumber phoneNumber) {
-        intentPhoneNumber = new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + phoneNumber.getNumber()));
-
-        if (!PermissionUtils.Check_CALL_PHONE(getActivity()))
-            PermissionUtils.Request_CALL_PHONE(getActivity(), PERMISSION_CODE);
-        else
-            getActivity().startActivity(intentPhoneNumber);
-    }
-
-    @Nullable
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
-        View view = getActivity().getLayoutInflater().inflate(R.layout.dialog_call_phone_number, container);
-
-        unbinder = ButterKnife.bind(this, view);
-
-        recyclerView.setLayoutManager(new LinearLayoutManager(getActivity(), RecyclerView.VERTICAL, false));
-
-        DialogAdapterRV adapterRV = new DialogAdapterRV();
-        adapterRV.addToCollection(collection);
-
-        adapterRV.setOnItemClick((viewHolder, model) -> callPhone((ModelPhoneNumber) model));
-
-        recyclerView.setAdapter(adapterRV);
-        return view;
-    }
-
-    @Override
-    public void onDestroy() {
-        super.onDestroy();
-        unbinder.unbind();
-    }
-}
Index: app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/LoadingViewAnnouncement.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/LoadingViewAnnouncement.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/LoadingViewAnnouncement.java	(date 0)
@@ -1,164 +0,0 @@
-package com.application.arenda.Entities.Announcements.ViewAnnouncement;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.net.Uri;
-import android.util.Log;
-
-import com.android.volley.AuthFailureError;
-import com.android.volley.Request;
-import com.android.volley.RequestQueue;
-import com.android.volley.Response;
-import com.android.volley.TimeoutError;
-import com.android.volley.VolleyError;
-import com.android.volley.toolbox.StringRequest;
-import com.android.volley.toolbox.Volley;
-import com.application.arenda.Entities.Models.ModelViewAnnouncement;
-import com.application.arenda.Entities.Models.ModelPhoneNumber;
-import com.application.arenda.Entities.User.UserCookie;
-import com.application.arenda.Entities.Utils.Utils;
-import com.application.arenda.R;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import io.reactivex.Observable;
-
-public class LoadingViewAnnouncement implements ILoadingViewAnnouncement {
-    @Override
-    public Observable<ModelViewAnnouncement> loadAnnouncement(Context context, String url, long idAnnouncement) {
-        return Observable.create(observableEmitter -> {
-            StringRequest request = new StringRequest(Request.Method.POST, url, new Response.Listener<String>() {
-                @SuppressLint("SimpleDateFormat")
-                @Override
-                public void onResponse(String response) {
-                    try {
-                        JSONObject jsonObject = new JSONObject(response);
-
-                        JSONArray announcement = jsonObject.getJSONArray("announcement");
-                        JSONArray uris = jsonObject.getJSONArray("uris");
-
-                        String code = jsonObject.getString("code");
-
-                        switch (code) {
-                            case "1": {
-                                JSONObject object;
-                                ModelViewAnnouncement model = new ModelViewAnnouncement();
-                                List<Uri> uriList = new ArrayList<>();
-                                List<ModelPhoneNumber> phoneNumbers = new ArrayList<>();
-
-                                for (int i = 0; i < announcement.length(); i++) {
-                                    object = announcement.getJSONObject(i);
-
-                                    model.setID(Integer.parseInt(object.getString("idAnnouncement")));
-
-                                    model.setIdUser(Integer.parseInt(object.getString("idUser")));
-
-                                    model.setName(object.getString("name"));
-                                    model.setDescription(object.getString("description"));
-
-                                    model.setCostToBYN(Float.parseFloat(object.getString("costToBYN")));
-                                    model.setCostToUSD(Float.parseFloat(object.getString("costToUSD")));
-                                    model.setCostToEUR(Float.parseFloat(object.getString("costToEUR")));
-
-                                    model.setAddress(object.getString("address"));
-
-                                    model.setPlacementDate(Utils.getFormatingDate(context, object.getString("placementDate")));
-                                    model.setRate(Float.parseFloat(object.getString("rating")));
-                                    model.setCountRent(Integer.parseInt(object.getString("countRent")));
-
-                                    if (object.getString("isVisible_phone_1").equals("1"))
-                                        phoneNumbers.add(new ModelPhoneNumber(1, object.getString("phone_1")));
-                                    if (object.getString("isVisible_phone_2").equals("1"))
-                                        phoneNumbers.add(new ModelPhoneNumber(2, object.getString("phone_2")));
-                                    if (object.getString("isVisible_phone_3").equals("1"))
-                                        phoneNumbers.add(new ModelPhoneNumber(3, object.getString("phone_3")));
-
-                                    model.setPhoneNumbers(phoneNumbers);
-
-                                    model.setFavorite(object.getString("isFavorite").equals("1"));
-                                }
-
-                                for (int i = 0; i < uris.length(); i++) {
-                                    object = uris.getJSONObject(i);
-
-                                    uriList.add(Uri.parse(object.getString("photoPath")));
-                                }
-
-                                model.setUriCollection(uriList);
-
-                                observableEmitter.onNext(model);
-                                break;
-                            }
-
-                            case "2": {
-                                Log.d(getClass().toString(), response);
-                                Utils.messageOutput(context, context.getResources()
-                                        .getString(R.string.error_fail_loading_announcement) + response);
-
-                                observableEmitter.onComplete();
-                                break;
-                            }
-
-                            case "101": {
-                                Log.d(getClass().toString(), response);
-                                Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-
-                                observableEmitter.onComplete();
-                                break;
-                            }
-                            default: {
-                                Log.d(getClass().toString(), response);
-                                Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-
-                                observableEmitter.onComplete();
-                            }
-                        }
-                    } catch (JSONException e) {
-                        Log.d(getClass().toString(), response);
-                        Utils.messageOutput(context, context.getResources()
-                                .getString(R.string.error_fail_loading_announcement) + e.getMessage());
-
-                        observableEmitter.onError(e);
-                    } finally {
-                        observableEmitter.onComplete();
-                    }
-                }
-            },
-                    new Response.ErrorListener() {
-                        @Override
-                        public void onErrorResponse(VolleyError volleyError) {
-                            if (volleyError instanceof TimeoutError) {
-                                Utils.messageOutput(context, context.getResources()
-                                        .getString(R.string.error_check_internet_connect));
-                            } else {
-                                Log.d(getClass().toString(), String.valueOf(volleyError.getMessage()));
-                                Utils.messageOutput(context, context.getResources()
-                                        .getString(R.string.error_fail_loading_announcement));
-                            }
-
-                            observableEmitter.onError(volleyError);
-                        }
-                    }) {
-                @SuppressLint("SimpleDateFormat")
-                @Override
-                protected Map<String, String> getParams() throws AuthFailureError {
-                    HashMap<String, String> params = new HashMap<>();
-                    params.put("token", UserCookie.getToken(context));
-                    params.put("idAnnouncement", String.valueOf(idAnnouncement));
-
-                    return params;
-                }
-            };
-
-            RequestQueue requestQueue = Volley.newRequestQueue(context);
-            requestQueue.add(request);
-        });
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/ILoadingViewAnnouncement.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/ILoadingViewAnnouncement.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/ViewAnnouncement/ILoadingViewAnnouncement.java	(date 0)
@@ -1,11 +0,0 @@
-package com.application.arenda.Entities.Announcements.ViewAnnouncement;
-
-import android.content.Context;
-
-import com.application.arenda.Entities.Models.ModelViewAnnouncement;
-
-import io.reactivex.Observable;
-
-public interface ILoadingViewAnnouncement {
-    Observable<ModelViewAnnouncement> loadAnnouncement(final Context context, final String url, final long idAnnouncement);
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/Announcement.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/Announcement.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/Announcement.java	(date 0)
@@ -1,326 +0,0 @@
-package com.application.arenda.Entities.Announcements;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.net.Uri;
-
-import androidx.annotation.NonNull;
-
-import com.application.arenda.BuildConfig;
-import com.application.arenda.Entities.Models.ModelCategory;
-import com.application.arenda.Entities.Models.ModelInsertAnnouncement;
-import com.application.arenda.Entities.Models.ModelSubcategory;
-import com.application.arenda.Entities.User.UserCookie;
-import com.application.arenda.Entities.Utils.FileUtils;
-import com.application.arenda.Entities.Utils.Network.ApiClient;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-import io.reactivex.Observable;
-import okhttp3.MediaType;
-import okhttp3.MultipartBody;
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.Callback;
-import retrofit2.Response;
-import timber.log.Timber;
-
-public class Announcement {
-    @SuppressLint("StaticFieldLeak")
-    private static Announcement announcement;
-
-    private Announcement() {
-    }
-
-    public static Announcement getInstance() {
-        if (announcement == null)
-            announcement = new Announcement();
-
-        return announcement;
-    }
-
-    @NonNull
-    public Observable<List<ModelCategory>> getCategories(OnAnnouncementListener announcementListener) {
-        return Observable.create(observableEmitter -> {
-            List<ModelCategory> categoryList = new ArrayList<>();
-
-            ApiClient.getApi()
-                    .create(ApiAnnouncement.class).getCategories()
-                    .enqueue(new Callback<ResponseBody>() {
-                        @Override
-                        public void onResponse(@NonNull Call<ResponseBody> call,
-                                               @NonNull Response<ResponseBody> response) {
-                            try {
-                                String res = response.body().string();
-
-                                if (res != null) {
-                                    JSONObject object = new JSONObject(res);
-
-                                    String message = object.getString("response");
-
-                                    if (ApiAnnouncement.AnnouncementCodes.valueOf(message) == ApiAnnouncement.AnnouncementCodes.SUCCESS_CATEGORIES_LOADED) {
-
-                                        JSONArray categories = object.getJSONArray("categories");
-
-                                        JSONObject model;
-
-                                        for (int i = 0; i < categories.length(); i++) {
-                                            model = categories.getJSONObject(i);
-
-                                            categoryList.add(new ModelCategory(Long.parseLong(model.getString("idCategory")),
-
-                                                    //--> delete for release version
-
-                                                    BuildConfig.BASE_URL +
-
-                                                            //<--
-
-                                                            model.getString("iconUri"), model.getString("name").trim()));
-                                        }
-
-                                        Collections.sort(categoryList, (o1, o2) -> o2.getName().length() - o1.getName().length());
-
-                                        observableEmitter.onNext(categoryList);
-
-                                        if (announcementListener != null)
-                                            announcementListener.onComplete(ApiAnnouncement.AnnouncementCodes.valueOf(message));
-                                    }
-                                } else {
-                                    if (announcementListener != null)
-                                        announcementListener.onComplete(ApiAnnouncement.AnnouncementCodes.NETWORK_ERROR);
-                                }
-                            } catch (JSONException | IOException e) {
-                                Timber.e(e);
-
-                                if (announcementListener != null)
-                                    announcementListener.onFailure(e);
-
-                                observableEmitter.onError(e);
-                            } finally {
-                                observableEmitter.onComplete();
-                            }
-                        }
-
-                        @Override
-                        public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
-                            if (announcementListener != null)
-                                announcementListener.onFailure(t);
-
-                            observableEmitter.onError(t);
-                        }
-                    });
-        });
-    }
-
-    @NonNull
-    public Observable<List<ModelSubcategory>> getSubcategories(long idCategory, OnAnnouncementListener announcementListener) {
-        return Observable.create(observableEmitter -> {
-            List<ModelSubcategory> subcategoryList = new ArrayList<>();
-
-            ApiClient.getApi()
-                    .create(ApiAnnouncement.class).getSubcategories(idCategory).enqueue(new Callback<ResponseBody>() {
-                @Override
-                public void onResponse(@NonNull Call<ResponseBody> call,
-                                       @NonNull Response<ResponseBody> response) {
-                    try {
-                        String res = response.body().string();
-
-                        if (res != null) {
-                            JSONObject object = new JSONObject(res);
-
-                            String message = object.getString("response");
-
-                            if (ApiAnnouncement.AnnouncementCodes.valueOf(message) == ApiAnnouncement.AnnouncementCodes.SUCCESS_SUBCATEGORIES_LOADED) {
-
-                                JSONArray subcategories = object.getJSONArray("subcategories");
-
-                                JSONObject model;
-
-                                Timber.tag("SUB_SIZE").i(String.valueOf(subcategories.length()));
-
-                                for (int i = 0; i < subcategories.length(); i++) {
-                                    model = subcategories.getJSONObject(i);
-
-                                    subcategoryList.add(new ModelSubcategory(Long.parseLong(model.getString("idSubcategory")),
-                                            idCategory, model.getString("name").trim()));
-                                }
-
-                                Collections.sort(subcategoryList, (o1, o2) -> o2.getName().length() - o1.getName().length());
-
-                                observableEmitter.onNext(subcategoryList);
-
-                                if (announcementListener != null)
-                                    announcementListener.onComplete(ApiAnnouncement.AnnouncementCodes.valueOf(message));
-                            }
-                        } else {
-                            if (announcementListener != null)
-                                announcementListener.onComplete(ApiAnnouncement.AnnouncementCodes.NETWORK_ERROR);
-                        }
-                    } catch (JSONException | IOException e) {
-                        Timber.e(e);
-                        if (announcementListener != null)
-                            announcementListener.onFailure(e);
-
-                        observableEmitter.onError(e);
-
-                        observableEmitter.onError(e);
-                    } finally {
-                        observableEmitter.onComplete();
-                    }
-                }
-
-                @Override
-                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
-                    if (announcementListener != null)
-                        announcementListener.onFailure(t);
-
-                    observableEmitter.onError(t);
-                }
-            });
-        });
-    }
-
-    @NonNull
-    private RequestBody createPartFromString(String s) {
-        return RequestBody.create(MultipartBody.FORM, s);
-    }
-
-    @NonNull
-    private MultipartBody.Part createFilePart(Context context, String partName, Uri uri) {
-        try {
-            File file = FileUtils.getFileFromUri(context, uri);
-
-            RequestBody requestBody = RequestBody.create(MediaType.parse(context.getContentResolver().getType(uri)), file);
-
-            return MultipartBody.Part.createFormData(partName, file.getName(), requestBody);
-
-        } catch (Throwable e) {
-            Timber.e(e);
-        }
-        return null;
-    }
-
-    public Observable<ApiAnnouncement.AnnouncementCodes> insertAnnouncement(Context context, ModelInsertAnnouncement announcement) {
-        return Observable.create(observableEmitter -> {
-            List<Uri> uris = announcement.getUrisBitmap();
-            List<MultipartBody.Part> partList = new ArrayList<>();
-
-            for (int i = 0; i < uris.size(); i++) {
-                partList.add(createFilePart(context, "picture_" + i, uris.get(i)));
-            }
-
-            ApiClient.getApi()
-                    .create(ApiAnnouncement.class)
-                    .insertAnnouncement(
-                            UserCookie.getToken(context),
-                            announcement.getIdSubcategory(),
-
-                            announcement.getName(),
-                            announcement.getDescription(),
-
-                            announcement.getCostToBYN(),
-                            announcement.getCostToUSD(),
-                            announcement.getCostToEUR(),
-
-                            announcement.getAddress(),
-
-                            announcement.getPhone_1(),
-                            announcement.isVisiblePhone_1(),
-
-                            announcement.getPhone_2(),
-                            announcement.isVisiblePhone_2(),
-
-                            announcement.getPhone_3(),
-                            announcement.isVisiblePhone_3()
-
-                    ).enqueue(new Callback<ResponseBody>() {
-                @Override
-                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
-                    try {
-                        String res = response.body().string();
-
-                        if (res != null) {
-                            JSONObject object = new JSONObject(res);
-
-                            String message = object.getString("response");
-
-                            if (ApiAnnouncement.AnnouncementCodes.valueOf(message) == ApiAnnouncement.AnnouncementCodes.SUCCESS_ANNOUNCEMENT_ADDED) {
-                                insertPhotos(object.getString("idAnnouncement"), partList, new OnAnnouncementListener() {
-                                    @Override
-                                    public void onComplete(@NonNull ApiAnnouncement.AnnouncementCodes code) {
-                                        observableEmitter.onNext(code);
-                                    }
-
-                                    @Override
-                                    public void onFailure(@NonNull Throwable t) {
-                                        observableEmitter.onError(t);
-                                    }
-                                });
-                            } else {
-                                observableEmitter.onNext(ApiAnnouncement.AnnouncementCodes.UNKNOW_ERROR);
-                            }
-                        } else {
-                            observableEmitter.onNext(ApiAnnouncement.AnnouncementCodes.UNKNOW_ERROR);
-                        }
-                    } catch (JSONException | IOException e) {
-                        Timber.e(e);
-                        observableEmitter.onError(e);
-                    } finally {
-                        observableEmitter.onComplete();
-                    }
-                }
-
-                @Override
-                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
-                    observableEmitter.onError(t);
-                }
-            });
-        });
-    }
-
-    private void insertPhotos(String idAnnouncement, List<MultipartBody.Part> partList, OnAnnouncementListener listener) {
-        ApiClient.getApi()
-                .create(ApiAnnouncement.class)
-                .insertPictures(createPartFromString(idAnnouncement), partList, partList.size())
-                .enqueue(new Callback<ResponseBody>() {
-                    @Override
-                    public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
-                        try {
-                            String res = response.body().string();
-
-                            if (res != null) {
-                                JSONObject object = new JSONObject(res);
-
-                                String message = object.getString("response");
-
-                                if (ApiAnnouncement.AnnouncementCodes.valueOf(message) == ApiAnnouncement.AnnouncementCodes.SUCCESS_PICTURES_ADDED) {
-
-                                } else {
-                                    listener.onComplete(ApiAnnouncement.AnnouncementCodes.UNKNOW_ERROR);
-                                }
-                            } else {
-                                listener.onComplete(ApiAnnouncement.AnnouncementCodes.UNKNOW_ERROR);
-                            }
-                        } catch (JSONException | IOException e) {
-                            Timber.e(e);
-                            listener.onComplete(ApiAnnouncement.AnnouncementCodes.UNKNOW_ERROR);
-                        }
-                    }
-
-                    @Override
-                    public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
-                        Timber.e(t);
-                        listener.onComplete(ApiAnnouncement.AnnouncementCodes.UNKNOW_ERROR);
-                    }
-                });
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/AllAnnouncements/AllAnnouncementsVH.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/AllAnnouncements/AllAnnouncementsVH.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/AllAnnouncements/AllAnnouncementsVH.java	(date 1586625309000)
@@ -10,11 +10,11 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import com.application.arenda.Entities.Models.IModel;
-import com.application.arenda.Entities.Models.ModelAllAnnouncement;
+import com.application.arenda.Entities.Models.Announcement;
+import com.application.arenda.Entities.Models.BackendlessTable;
 import com.application.arenda.Entities.RecyclerView.BaseViewHolder;
 import com.application.arenda.Entities.RecyclerView.OnItemClick;
-import com.application.arenda.Entities.Utils.Glide.GlideUtils;
+import com.application.arenda.Entities.Utils.Utils;
 import com.application.arenda.R;
 
 import butterknife.BindView;
@@ -53,7 +53,7 @@
     @BindView(R.id.textRatingAnnouncement)
     TextView textRatingAnnouncement;
 
-    private ModelAllAnnouncement model;
+    private Announcement model;
     private int position;
 
     public AllAnnouncementsVH(@NonNull View itemView) {
@@ -62,11 +62,6 @@
         ButterKnife.bind(this, itemView);
     }
 
-    @Override
-    public int getResourceLayoutId() {
-        return R.layout.vh_announcement;
-    }
-
     public static AllAnnouncementsVH create(ViewGroup parent) {
         LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
         View view = layoutInflater.inflate(R.layout.vh_announcement, parent, false);
@@ -74,8 +69,13 @@
     }
 
     @Override
-    public void onBind(IModel model, int position) {
-        this.model = (ModelAllAnnouncement) model;
+    public int getResourceLayoutId() {
+        return R.layout.vh_announcement;
+    }
+
+    @Override
+    public void onBind(BackendlessTable model, int position) {
+        this.model = (Announcement) model;
         this.position = position;
 
         bind();
@@ -83,10 +83,10 @@
 
     @SuppressLint({"SetTextI18n"})
     private void bind() {
-        GlideUtils.loadImage(itemView.getContext(), model.getMainUriBitmap(), imgProduct);
+//        GlideUtils.loadImage(itemView.getContext(), model.getMainUriBitmap(), imgProduct);
 
-        textPlacementDate.setText(model.getPlacementDate());
-        textRatingAnnouncement.setText(String.valueOf(model.getRate()));
+        textPlacementDate.setText(Utils.getFormatingDate(itemView.getContext(), model.getCreated().toString()));
+        textRatingAnnouncement.setText(String.valueOf(model.getRating()));
 
         textNameProduct.setText(model.getName());
 
@@ -96,7 +96,7 @@
         textCountRent.setText(String.valueOf(model.getCountRent()));
         textLocation.setText(model.getAddress());
 
-        setActiveHeart(model.isFavorite());
+//        setActiveHeart(model.);
     }
 
     public void setOnItemViewClick(OnItemClick itemClick) {
Index: app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/AllAnnouncements/AllAnnouncementsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/AllAnnouncements/AllAnnouncementsAdapter.java	(date 1586614473000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/AllAnnouncements/AllAnnouncementsAdapter.java	(date 1586614473000)
@@ -4,11 +4,11 @@
 
 import androidx.annotation.NonNull;
 
-import com.application.arenda.Entities.Models.ModelAllAnnouncement;
+import com.application.arenda.Entities.Models.Announcement;
 import com.application.arenda.Entities.RecyclerView.BaseAdapter;
 import com.application.arenda.Entities.RecyclerView.OnItemClick;
 
-public class AllAnnouncementsAdapter extends BaseAdapter<ModelAllAnnouncement, AllAnnouncementsVH> {
+public class AllAnnouncementsAdapter extends BaseAdapter<Announcement, AllAnnouncementsVH> {
 
     private OnItemClick itemViewClick;
     private OnItemClick itemHeartClick;
Index: app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/UserAnnouncements/UserAnnouncementsVH.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/UserAnnouncements/UserAnnouncementsVH.java	(date 1586625309000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/UserAnnouncements/UserAnnouncementsVH.java	(date 1586625309000)
@@ -10,11 +10,11 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
-import com.application.arenda.Entities.Models.IModel;
-import com.application.arenda.Entities.Models.ModelUserAnnouncement;
+import com.application.arenda.Entities.Models.Announcement;
+import com.application.arenda.Entities.Models.BackendlessTable;
 import com.application.arenda.Entities.RecyclerView.BaseViewHolder;
 import com.application.arenda.Entities.RecyclerView.OnItemClick;
-import com.application.arenda.Entities.Utils.Glide.GlideUtils;
+import com.application.arenda.Entities.Utils.Utils;
 import com.application.arenda.R;
 
 import butterknife.BindView;
@@ -57,7 +57,7 @@
     @BindView(R.id.textCountFavorites)
     TextView textCountFavorites;
 
-    private ModelUserAnnouncement model;
+    private Announcement model;
     private int position;
 
     public UserAnnouncementsVH(@NonNull View itemView) {
@@ -78,8 +78,8 @@
     }
 
     @Override
-    public void onBind(IModel model, int position) {
-        this.model = (ModelUserAnnouncement) model;
+    public void onBind(BackendlessTable model, int position) {
+        this.model = (Announcement) model;
         this.position = position;
 
         bind();
@@ -87,10 +87,10 @@
 
     @SuppressLint("SetTextI18n")
     private void bind() {
-        GlideUtils.loadImage(itemView.getContext(), model.getMainUriBitmap(), imgProduct);
+//        GlideUtils.loadImage(itemView.getContext(), model.getMainUriBitmap(), imgProduct);
 
-        textPlacementDate.setText(model.getPlacementDate());
-        textRatingAnnouncement.setText(String.valueOf(model.getRate()));
+        textPlacementDate.setText(Utils.getFormatingDate(itemView.getContext(), model.getCreated().toString()));
+        textRatingAnnouncement.setText(String.valueOf(model.getRating()));
 
         textCountViewers.setText(String.valueOf(model.getCountViewers()));
         textCountFavorites.setText(String.valueOf(model.getCountFavorites()));
Index: app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/UserAnnouncements/UserAnnouncementsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/UserAnnouncements/UserAnnouncementsAdapter.java	(date 1586614473000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/UserAnnouncements/UserAnnouncementsAdapter.java	(date 1586614473000)
@@ -4,11 +4,11 @@
 
 import androidx.annotation.NonNull;
 
-import com.application.arenda.Entities.Models.ModelUserAnnouncement;
+import com.application.arenda.Entities.Models.Announcement;
 import com.application.arenda.Entities.RecyclerView.BaseAdapter;
 import com.application.arenda.Entities.RecyclerView.OnItemClick;
 
-public class UserAnnouncementsAdapter extends BaseAdapter<ModelUserAnnouncement, UserAnnouncementsVH> {
+public class UserAnnouncementsAdapter extends BaseAdapter<Announcement, UserAnnouncementsVH> {
 
     private OnItemClick itemViewClick;
 
Index: app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/LoadingAnnouncements.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/LoadingAnnouncements.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/LoadingAnnouncements/LoadingAnnouncements.java	(date 0)
@@ -1,506 +0,0 @@
-package com.application.arenda.Entities.Announcements.LoadingAnnouncements;
-
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.net.Uri;
-
-import com.android.volley.AuthFailureError;
-import com.android.volley.NetworkError;
-import com.android.volley.Request;
-import com.android.volley.RequestQueue;
-import com.android.volley.ServerError;
-import com.android.volley.TimeoutError;
-import com.android.volley.toolbox.StringRequest;
-import com.android.volley.toolbox.Volley;
-import com.application.arenda.Entities.Models.ModelAllAnnouncement;
-import com.application.arenda.Entities.Models.ModelUserAnnouncement;
-import com.application.arenda.Entities.User.UserCookie;
-import com.application.arenda.Entities.Utils.Utils;
-import com.application.arenda.R;
-
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import io.reactivex.Observable;
-import timber.log.Timber;
-
-public class LoadingAnnouncements {
-
-    private Context context;
-    private RequestQueue requestQueue;
-
-    private StringRequest requestLoadingAllAnnouncements;
-    private StringRequest requestSearchToAllAnnouncements;
-    private StringRequest requestLoadUserAnnouncements;
-    private StringRequest requestSearchToUserAnnouncements;
-
-    private short tagRequestLoadAllAnnouncements = 1585;
-    private short tagRequestSearchToAllAnnouncements = 1912;
-    private short tagRequestLoadUserAnnouncements = 1738;
-    private short tagRequesSearchToUsertAnnouncements = 1382;
-
-    public LoadingAnnouncements(Context context) {
-        this.context = context;
-        requestQueue = Volley.newRequestQueue(context);
-    }
-
-    public Observable<List<ModelAllAnnouncement>> loadAllAnnouncements(long lastID, int limitItemInPage, final String url) {
-        return Observable.create(observableEmitter -> {
-            List<ModelAllAnnouncement> models = new ArrayList<>();
-
-            requestLoadingAllAnnouncements = new StringRequest(Request.Method.POST, url, response -> {
-                try {
-                    final JSONObject jsonObject = new JSONObject(response);
-
-                    final JSONArray announcements = jsonObject.getJSONArray("announcements");
-
-                    final String code = jsonObject.getString("code");
-
-                    switch (code) {
-                        case "1": {
-                            for (int i = 0; i < announcements.length(); i++) {
-                                final JSONObject object = announcements.getJSONObject(i);
-
-                                ModelAllAnnouncement model = new ModelAllAnnouncement();
-
-                                model.setID(Integer.parseInt(object.getString("idAnnouncement")));
-
-                                model.setIdUser(Integer.parseInt(object.getString("idUser")));
-
-                                model.setName(object.getString("name"));
-
-                                model.setCostToBYN(Float.parseFloat(object.getString("costToBYN")));
-                                model.setCostToUSD(Float.parseFloat(object.getString("costToUSD")));
-                                model.setCostToEUR(Float.parseFloat(object.getString("costToEUR")));
-
-                                model.setAddress(object.getString("address"));
-
-                                model.setPlacementDate(Utils.getFormatingDate(context, object.getString("placementDate")));
-                                model.setRate(Float.parseFloat(object.getString("rating")));
-                                model.setCountRent(Integer.parseInt(object.getString("countRent")));
-                                model.setMainUriBitmap(Uri.parse(object.getString("photoPath")));
-
-                                if (object.getString("isFavorite").equals("1"))
-                                    model.setFavorite(true);
-                                else
-                                    model.setFavorite(false);
-
-                                models.add(model);
-                            }
-
-                            observableEmitter.onNext(models);
-
-                            break;
-                        }
-
-                        case "2": {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements) + response);
-                            break;
-                        }
-
-                        case "3":
-                            break;
-
-                        case "101": {
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-                            break;
-                        }
-                        default: {
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-                        }
-                    }
-                } catch (JSONException e) {
-                    Timber.d(e);
-                    Utils.messageOutput(context, context.getResources()
-                            .getString(R.string.error_fail_loading_announcements) + e.getMessage());
-
-                    observableEmitter.onError(e);
-                } finally {
-                    Timber.d(response);
-
-                    observableEmitter.onComplete();
-
-                    requestQueue.cancelAll(tagRequestLoadAllAnnouncements);
-                }
-            },
-                    volleyError -> {
-                        if (volleyError instanceof TimeoutError ||
-                                volleyError instanceof NetworkError ||
-                                volleyError instanceof ServerError) {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_check_internet_connect));
-                        } else {
-                            Timber.d(String.valueOf(volleyError.getMessage()));
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements));
-                        }
-
-                        observableEmitter.onError(volleyError);
-
-                        requestQueue.cancelAll(tagRequestLoadAllAnnouncements);
-                    }) {
-                @SuppressLint("SimpleDateFormat")
-                @Override
-                protected Map<String, String> getParams() throws AuthFailureError {
-                    HashMap<String, String> params = new HashMap<>();
-                    params.put("token", UserCookie.getToken(context));
-                    params.put("idAnnouncement", String.valueOf(lastID));
-                    params.put("limitItemInPage", String.valueOf(limitItemInPage));
-
-                    return params;
-                }
-            };
-
-            requestQueue.add(requestLoadingAllAnnouncements);
-        });
-    }
-
-    public Observable<List<ModelAllAnnouncement>> searchToAllAnnouncements(long lastID, int limitItemInPage, String search, String url) {
-        return Observable.create(observableEmitter -> {
-            List<ModelAllAnnouncement> models = new ArrayList<>();
-
-            requestSearchToAllAnnouncements = new StringRequest(Request.Method.POST, url, response -> {
-                try {
-                    JSONObject jsonObject = new JSONObject(response);
-
-                    JSONArray announcements = jsonObject.getJSONArray("announcements");
-
-                    String code = jsonObject.getString("code");
-
-                    switch (code) {
-                        case "1": {
-                            JSONObject object;
-
-                            for (int i = 0; i < announcements.length(); i++) {
-                                object = announcements.getJSONObject(i);
-
-                                ModelAllAnnouncement model = new ModelAllAnnouncement();
-
-                                model.setID(Integer.parseInt(object.getString("idAnnouncement")));
-
-                                model.setIdUser(Integer.parseInt(object.getString("idUser")));
-
-                                model.setName(object.getString("name"));
-
-                                model.setCostToBYN(Float.parseFloat(object.getString("costToBYN")));
-                                model.setCostToUSD(Float.parseFloat(object.getString("costToUSD")));
-                                model.setCostToEUR(Float.parseFloat(object.getString("costToEUR")));
-
-                                model.setAddress(object.getString("address"));
-
-                                model.setPlacementDate(Utils.getFormatingDate(context, object.getString("placementDate")));
-                                model.setRate(Float.parseFloat(object.getString("rating")));
-                                model.setCountRent(Integer.parseInt(object.getString("countRent")));
-                                model.setMainUriBitmap(Uri.parse(object.getString("photoPath")));
-
-                                if (object.getString("isFavorite").equals("1"))
-                                    model.setFavorite(true);
-                                else
-                                    model.setFavorite(false);
-
-                                models.add(model);
-                            }
-
-                            observableEmitter.onNext(models);
-
-                            break;
-                        }
-
-                        case "2": {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements) + response);
-
-                            break;
-                        }
-
-                        case "3":
-                            break;
-
-                        case "101": {
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-
-                            break;
-                        }
-                        default: {
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-                        }
-                    }
-                } catch (JSONException e) {
-                    Timber.d(e);
-                    Utils.messageOutput(context, context.getResources()
-                            .getString(R.string.error_fail_loading_announcements) + e.getMessage());
-
-                    observableEmitter.onError(e);
-                } finally {
-                    Timber.d(response);
-
-                    observableEmitter.onComplete();
-                }
-            },
-                    volleyError -> {
-                        if (volleyError instanceof TimeoutError ||
-                                volleyError instanceof NetworkError ||
-                                volleyError instanceof ServerError) {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_check_internet_connect));
-                        } else {
-                            Timber.d(String.valueOf(volleyError.getMessage()));
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements));
-                        }
-
-                        observableEmitter.onError(volleyError);
-                    }) {
-                @SuppressLint("SimpleDateFormat")
-                @Override
-                protected Map<String, String> getParams() throws AuthFailureError {
-                    HashMap<String, String> params = new HashMap<>();
-                    params.put("token", UserCookie.getToken(context));
-                    params.put("idAnnouncement", String.valueOf(lastID));
-
-                    if (search.length() > 0 && search != null)
-                        params.put("search", search);
-
-                    return params;
-                }
-            };
-
-            requestQueue.add(requestSearchToAllAnnouncements);
-        });
-    }
-
-    public Observable<List<ModelUserAnnouncement>> loadUserAnnouncements(long lastID, int limitItemInPage, final String url) {
-        return Observable.create(observableEmitter -> {
-            List<ModelUserAnnouncement> models = new ArrayList<>();
-
-            requestLoadUserAnnouncements = new StringRequest(Request.Method.POST, url, response -> {
-                try {
-                    JSONObject jsonObject = new JSONObject(response);
-
-                    String code = jsonObject.getString("code");
-
-                    JSONArray announcements = jsonObject.getJSONArray("announcements");
-
-                    switch (code) {
-                        case "1": {
-                            JSONObject object;
-
-                            for (int i = 0; i < announcements.length(); i++) {
-                                object = announcements.getJSONObject(i);
-
-                                ModelUserAnnouncement model = new ModelUserAnnouncement();
-
-                                model.setID(Integer.parseInt(object.getString("idAnnouncement")));
-
-                                model.setIdUser(Integer.parseInt(object.getString("idUser")));
-
-                                model.setName(object.getString("name"));
-
-                                model.setCountRent(Integer.parseInt(object.getString("countRent")));
-                                model.setCountViewers(Integer.parseInt(object.getString("countViewers")));
-                                model.setCountFavorites(Integer.parseInt(object.getString("countFavorites")));
-
-                                model.setCostToBYN(Float.parseFloat(object.getString("costToBYN")));
-                                model.setCostToUSD(Float.parseFloat(object.getString("costToUSD")));
-                                model.setCostToEUR(Float.parseFloat(object.getString("costToEUR")));
-
-                                model.setAddress(object.getString("address"));
-
-                                model.setPlacementDate(Utils.getFormatingDate(context, object.getString("placementDate")));
-                                model.setRate(Float.parseFloat(object.getString("rating")));
-                                model.setMainUriBitmap(Uri.parse(object.getString("photoPath")));
-
-                                models.add(model);
-                            }
-
-                            observableEmitter.onNext(models);
-
-                            break;
-                        }
-
-                        case "2": {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements) + response);
-
-                            break;
-                        }
-
-                        case "3":
-                            break;
-
-                        case "101": {
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-
-                            break;
-                        }
-                        default: {
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-                        }
-                    }
-                } catch (JSONException e) {
-                    Timber.d(e);
-                    Utils.messageOutput(context, context.getResources()
-                            .getString(R.string.error_fail_loading_announcements) + response);
-
-                    observableEmitter.onError(e);
-                } finally {
-                    Timber.d(response);
-
-                    observableEmitter.onComplete();
-                }
-            },
-                    volleyError -> {
-                        if (volleyError instanceof TimeoutError ||
-                                volleyError instanceof NetworkError ||
-                                volleyError instanceof ServerError) {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_check_internet_connect));
-                        } else {
-                            Timber.d(String.valueOf(volleyError.getMessage()));
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements));
-                        }
-
-                        observableEmitter.onError(volleyError);
-                    }) {
-                @SuppressLint("SimpleDateFormat")
-                @Override
-                protected Map<String, String> getParams() throws AuthFailureError {
-                    HashMap<String, String> params = new HashMap<>();
-                    params.put("token", UserCookie.getToken(context));
-                    params.put("idAnnouncement", String.valueOf(lastID));
-
-                    return params;
-                }
-            };
-
-            requestQueue.add(requestLoadUserAnnouncements);
-        });
-    }
-
-    public Observable<List<ModelUserAnnouncement>> searchToUserAnnouncements(long lastID, int limitItemInPage, String search, String url) {
-        return Observable.create(observableEmitter -> {
-            List<ModelUserAnnouncement> models = new ArrayList<>();
-
-            requestSearchToUserAnnouncements = new StringRequest(Request.Method.POST, url, response -> {
-                try {
-                    JSONObject jsonObject = new JSONObject(response);
-
-                    JSONArray announcements = jsonObject.getJSONArray("announcements");
-
-                    String code = jsonObject.getString("code");
-
-                    switch (code) {
-                        case "1": {
-                            JSONObject object;
-
-                            for (int i = 0; i < announcements.length(); i++) {
-                                object = announcements.getJSONObject(i);
-
-                                ModelUserAnnouncement model = new ModelUserAnnouncement();
-
-                                model.setID(Integer.parseInt(object.getString("idAnnouncement")));
-
-                                model.setIdUser(Integer.parseInt(object.getString("idUser")));
-
-                                model.setName(object.getString("name"));
-
-                                model.setCountRent(Integer.parseInt(object.getString("countRent")));
-                                model.setCountViewers(Integer.parseInt(object.getString("countViewers")));
-                                model.setCountFavorites(Integer.parseInt(object.getString("countFavorites")));
-
-                                model.setCostToBYN(Float.parseFloat(object.getString("costToBYN")));
-                                model.setCostToUSD(Float.parseFloat(object.getString("costToUSD")));
-                                model.setCostToEUR(Float.parseFloat(object.getString("costToEUR")));
-
-                                model.setAddress(object.getString("address"));
-
-                                model.setPlacementDate(Utils.getFormatingDate(context, object.getString("placementDate")));
-                                model.setRate(Float.parseFloat(object.getString("rating")));
-                                model.setMainUriBitmap(Uri.parse(object.getString("photoPath")));
-
-                                models.add(model);
-                            }
-
-                            observableEmitter.onNext(models);
-                            break;
-                        }
-
-                        case "2": {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements) + response);
-
-                            break;
-                        }
-
-                        case "3":
-                            break;
-
-                        case "101": {
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-
-                            break;
-                        }
-                        default: {
-
-                            Utils.messageOutput(context, context.getResources().getString(R.string.error_server_is_temporarily_unavailable));
-                        }
-                    }
-                } catch (JSONException e) {
-                    Timber.d(e);
-                    Utils.messageOutput(context, context.getResources()
-                            .getString(R.string.error_fail_loading_announcements) + e.getMessage());
-
-                    observableEmitter.onError(e);
-                } finally {
-                    Timber.d(response);
-
-                    observableEmitter.onComplete();
-                }
-            },
-                    volleyError -> {
-                        if (volleyError instanceof TimeoutError ||
-                                volleyError instanceof NetworkError ||
-                                volleyError instanceof ServerError) {
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_check_internet_connect));
-                        } else {
-                            Timber.d(String.valueOf(volleyError.getMessage()));
-                            Utils.messageOutput(context, context.getResources()
-                                    .getString(R.string.error_fail_loading_announcements));
-                        }
-
-                        observableEmitter.onError(volleyError);
-                    }) {
-                @SuppressLint("SimpleDateFormat")
-                @Override
-                protected Map<String, String> getParams() throws AuthFailureError {
-                    HashMap<String, String> params = new HashMap<>();
-                    params.put("token", UserCookie.getToken(context));
-                    params.put("idAnnouncement", String.valueOf(lastID));
-
-                    if (search.length() > 0 && search != null)
-                        params.put("search", search);
-
-                    return params;
-                }
-            };
-
-            requestQueue.add(requestSearchToUserAnnouncements);
-        });
-    }
-
-    public void cancelAllRequest() {
-        requestQueue.cancelAll(tagRequestLoadAllAnnouncements);
-        requestQueue.cancelAll(tagRequesSearchToUsertAnnouncements);
-        requestQueue.cancelAll(tagRequestLoadUserAnnouncements);
-        requestQueue.cancelAll(tagRequestSearchToAllAnnouncements);
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/EventSendID.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/EventSendID.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/EventSendID.java	(date 0)
@@ -1,30 +0,0 @@
-package com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories;
-
-import org.greenrobot.eventbus.Subscribe;
-
-public class EventSendID {
-    private int idSubcategory;
-    private String name;
-
-    public EventSendID(int idSubcategory, String name) {
-        this.idSubcategory = idSubcategory;
-        this.name = name;
-    }
-
-    public String getName() {
-        return name;
-    }
-
-    public void setName(String name) {
-        this.name = name;
-    }
-
-    @Subscribe
-    public void setSelectedSubcategory(int idSubcategory) {
-        this.idSubcategory = idSubcategory;
-    }
-
-    public int getIdSubcategory() {
-        return idSubcategory;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesVH.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesVH.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesVH.java	(date 0)
@@ -1,85 +0,0 @@
-package com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories;
-
-import android.net.Uri;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.ImageView;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-import androidx.recyclerview.widget.RecyclerView;
-
-import com.application.arenda.Entities.Models.IModel;
-import com.application.arenda.Entities.Models.ModelCategory;
-import com.application.arenda.Entities.RecyclerView.BaseViewHolder;
-import com.application.arenda.Entities.Utils.Glide.GlideUtils;
-import com.application.arenda.R;
-import com.github.florent37.expansionpanel.ExpansionLayout;
-
-import org.jetbrains.annotations.Nullable;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
-public class CategoriesVH extends BaseViewHolder {
-    @Nullable
-    @BindView(R.id.categoryTitle)
-    TextView categoryTitle;
-
-    @Nullable
-    @BindView(R.id.categoryIcon)
-    ImageView categoryIcon;
-
-    @Nullable
-    @BindView(R.id.rvItemCategory)
-    RecyclerView rvItemCategory;
-
-    @Nullable
-    @BindView(R.id.categoryExpansionLayout)
-    ExpansionLayout categoryExpansionLayout;
-
-
-    private ModelCategory modelCategory;
-
-    public CategoriesVH(@NonNull View itemView) {
-        super(itemView);
-        ButterKnife.bind(this, itemView);
-    }
-
-    public static CategoriesVH create(ViewGroup parent) {
-        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.vh_category_item, parent, false);
-        return new CategoriesVH(view);
-    }
-
-    @Override
-    public int getResourceLayoutId() {
-        return R.layout.vh_category_item;
-    }
-
-    @Override
-    public void onBind(IModel model, int position) {
-        categoryExpansionLayout.collapse(false);
-
-        modelCategory = (ModelCategory) model;
-
-        categoryTitle.setText(modelCategory.getName());
-
-        GlideUtils.loadVector(itemView.getContext(), Uri.parse(modelCategory.getIconUri()), categoryIcon);
-    }
-
-    public ExpansionLayout getCategoryExpansionLayout() {
-        return categoryExpansionLayout;
-    }
-
-    public void setOnClickListener(OnClickItemCategory listener) {
-        categoryExpansionLayout.addListener((expansionLayout, expanded) -> {
-            if (expanded)
-                listener.inflateRecyclerViewOnClick(modelCategory.getID(), rvItemCategory);
-        });
-    }
-
-    public interface OnClickItemCategory {
-        void inflateRecyclerViewOnClick(long idCategory, RecyclerView rvItemCategory);
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoryVH.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoryVH.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoryVH.java	(date 0)
@@ -1,63 +0,0 @@
-package com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories;
-
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.TextView;
-
-import androidx.annotation.NonNull;
-
-import com.application.arenda.Entities.Models.IModel;
-import com.application.arenda.Entities.Models.ModelSubcategory;
-import com.application.arenda.Entities.RecyclerView.BaseViewHolder;
-import com.application.arenda.Entities.RecyclerView.OnItemClick;
-import com.application.arenda.R;
-
-import org.jetbrains.annotations.Nullable;
-
-import butterknife.BindView;
-import butterknife.ButterKnife;
-
-public class SubcategoryVH extends BaseViewHolder {
-    @Nullable
-    @BindView(R.id.subcategoryTitle)
-    TextView subcategoryTitle;
-
-    private ModelSubcategory modelSubcategory;
-
-    public SubcategoryVH(@NonNull View itemView) {
-        super(itemView);
-
-        ButterKnife.bind(this, itemView);
-    }
-
-    public static SubcategoryVH create(ViewGroup parent) {
-        LayoutInflater layoutInflater = LayoutInflater.from(parent.getContext());
-        View view = layoutInflater.inflate(R.layout.vh_subcategory_item, parent, false);
-        return new SubcategoryVH(view);
-    }
-
-    @Override
-    public int getResourceLayoutId() {
-        return R.layout.vh_subcategory_item;
-    }
-
-    @Override
-    public void onBind(IModel model, int position) {
-        modelSubcategory = (ModelSubcategory) model;
-
-        subcategoryTitle.setText(modelSubcategory.getName());
-    }
-
-    public long getIdSubcategory() {
-        return modelSubcategory.getID();
-    }
-
-    public long getIdCategory() {
-        return modelSubcategory.getIdCategory();
-    }
-
-    public void setOnClickListener(OnItemClick itemClick){
-        itemView.setOnClickListener(v -> itemClick.onClick(SubcategoryVH.this, modelSubcategory));
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesAdapter.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesAdapter.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesAdapter.java	(date 0)
@@ -1,40 +0,0 @@
-package com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories;
-
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-
-import com.application.arenda.Entities.Models.ModelCategory;
-import com.application.arenda.Entities.RecyclerView.BaseAdapter;
-import com.github.florent37.expansionpanel.viewgroup.ExpansionLayoutCollection;
-
-public class CategoriesAdapter extends BaseAdapter<ModelCategory, CategoriesVH> {
-    private final ExpansionLayoutCollection expansionLayoutCollection;
-
-    private CategoriesVH.OnClickItemCategory listener;
-
-    public CategoriesAdapter() {
-        expansionLayoutCollection = new ExpansionLayoutCollection();
-        expansionLayoutCollection.openOnlyOne(true);
-    }
-
-    @NonNull
-    @Override
-    public CategoriesVH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-        return CategoriesVH.create(parent);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull CategoriesVH holder, int position) {
-        holder.onBind(getItem(position), position);
-
-        if (listener != null)
-            holder.setOnClickListener(listener);
-
-        expansionLayoutCollection.add(holder.getCategoryExpansionLayout());
-    }
-
-    public void setOnClickCategory(CategoriesVH.OnClickItemCategory listener) {
-        this.listener = listener;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoriesAdapter.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoriesAdapter.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoriesAdapter.java	(date 0)
@@ -1,31 +0,0 @@
-package com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories;
-
-import android.view.ViewGroup;
-
-import androidx.annotation.NonNull;
-
-import com.application.arenda.Entities.Models.ModelSubcategory;
-import com.application.arenda.Entities.RecyclerView.BaseAdapter;
-import com.application.arenda.Entities.RecyclerView.OnItemClick;
-
-public class SubcategoriesAdapter extends BaseAdapter<ModelSubcategory, SubcategoryVH> {
-    private OnItemClick itemClick;
-
-    @NonNull
-    @Override
-    public SubcategoryVH onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
-        return SubcategoryVH.create(parent);
-    }
-
-    @Override
-    public void onBindViewHolder(@NonNull SubcategoryVH holder, int position) {
-        holder.onBind(getItem(position), position);
-
-        if(itemClick != null)
-            holder.setOnClickListener(itemClick);
-    }
-
-    public void setItemClick(OnItemClick itemClick) {
-        this.itemClick = itemClick;
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Announcements/OnAnnouncementListener.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/OnAnnouncementListener.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/OnAnnouncementListener.java	(date 0)
@@ -1,9 +0,0 @@
-package com.application.arenda.Entities.Announcements;
-
-import androidx.annotation.NonNull;
-
-public interface OnAnnouncementListener {
-    void onComplete(@NonNull ApiAnnouncement.AnnouncementCodes code);
-
-    void onFailure(@NonNull Throwable t);
-}
Index: app/src/main/java/com/application/arenda/Entities/Announcements/ApiAnnouncement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Announcements/ApiAnnouncement.java	(date 1586687203000)
+++ app/src/main/java/com/application/arenda/Entities/Announcements/ApiAnnouncement.java	(date 1586687203000)
@@ -1,78 +1,141 @@
 package com.application.arenda.Entities.Announcements;
 
-import com.application.arenda.BuildConfig;
+import android.annotation.SuppressLint;
+import android.content.Context;
+
+import androidx.annotation.NonNull;
+
+import com.application.arenda.Entities.Models.Announcement;
+import com.application.arenda.Entities.Models.Category;
+import com.application.arenda.Entities.Models.Subcategory;
+import com.backendless.Backendless;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.exceptions.BackendlessFault;
+import com.backendless.persistence.DataQueryBuilder;
 
 import java.util.List;
+import java.util.Map;
 
-import okhttp3.MultipartBody;
-import okhttp3.RequestBody;
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.http.Field;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.Multipart;
-import retrofit2.http.POST;
-import retrofit2.http.Part;
+import io.reactivex.Observable;
+import io.reactivex.SingleObserver;
+import io.reactivex.android.schedulers.AndroidSchedulers;
+import io.reactivex.disposables.Disposable;
+import io.reactivex.schedulers.Schedulers;
+import timber.log.Timber;
 
-public interface ApiAnnouncement {
-    @POST(BuildConfig.URL_LOAD_CATEGORY)
-    Call<ResponseBody> getCategories();
+public class ApiAnnouncement {
+    @SuppressLint("StaticFieldLeak")
+    private static ApiAnnouncement apiAnnouncement;
 
-    @FormUrlEncoded
-    @POST(BuildConfig.URL_LOAD_SUBCATEGORY)
-    Call<ResponseBody> getSubcategories(@Field("idCategory") long idCategory);
+    private ApiAnnouncement() {
+    }
 
-    @FormUrlEncoded
-    @POST(BuildConfig.URL_INSERT_ANNOUNCEMENT)
-    Call<ResponseBody> insertAnnouncement(
-            @Field("token") String token,
-            @Field("idSubcategory") int idSubcategory,
+    public static ApiAnnouncement getInstance() {
+        if (apiAnnouncement == null)
+            apiAnnouncement = new ApiAnnouncement();
 
-            @Field("name") String name,
-            @Field("description") String description,
+        return apiAnnouncement;
+    }
 
-            @Field("costToBYN") float costToBYN,
-            @Field("costToUSD") float costToUSD,
-            @Field("costToEUR") float costToEUR,
+    public Observable<Boolean> insertAnnouncement(Announcement announcement) {
+        return Observable.create(emitter -> Backendless.Data.of("Announcements").save(Announcement.convertToMap(announcement), new AsyncCallback<Map>() {
+            @Override
+            public void handleResponse(Map response) {
+                Backendless.Data.of("Announcements")
+                        .setRelation(response,
+                                "subcategory:Subcategories:n",
+                                announcement.getSubcategories(),
+                                new AsyncCallback<Integer>() {
+                                    @Override
+                                    public void handleResponse(Integer response) {
+                                        if (response > 0)
+                                            emitter.onNext(true);
+                                        else
+                                            emitter.onNext(false);
+                                    }
 
-            @Field("address") String address,
+                                    @Override
+                                    public void handleFault(BackendlessFault fault) {
+                                        Timber.e(fault.toString());
+                                    }
+                                });
+            }
 
-            @Field("phone_1") String phone_1,
-            @Field("isVisible_phone_1") boolean isVisible_phone_1,
+            @Override
+            public void handleFault(BackendlessFault fault) {
+                Timber.e(fault.toString());
+            }
+        }));
+    }
 
-            @Field("phone_2") String phone_2,
-            @Field("isVisible_phone_2") boolean isVisible_phone_2,
+    public Observable<List<Category>> getCategories(Context context) {
+        return Observable.create(emitter -> Backendless.Data.of("Categories").find(new AsyncCallback<List<Map>>() {
+            @SuppressLint("CheckResult")
+            @Override
+            public void handleResponse(List<Map> response) {
+                Observable.fromIterable(response)
+                        .subscribeOn(Schedulers.io())
+                        .map(map -> Category.convertFromMap(context, map))
+                        .toList()
+                        .observeOn(AndroidSchedulers.mainThread())
+                        .subscribe(new SingleObserver<List<Category>>() {
+                            @Override
+                            public void onSubscribe(Disposable d) {
+                            }
 
-            @Field("phone_3") String phone_3,
-            @Field("isVisible_phone_3") boolean isVisible_phone_3
-    );
+                            @Override
+                            public void onSuccess(List<Category> categories) {
+                                emitter.onNext(categories);
+                            }
 
-    @Multipart
-    @POST(BuildConfig.URL_INSERT_PHOTO)
-    Call<ResponseBody> insertPictures(
-            @Part("idAnnouncement") RequestBody idAnnouncement,
-            @Part List<MultipartBody.Part> pictures, @Part("countPictures") int countPictures);
+                            @Override
+                            public void onError(Throwable e) {
+                                emitter.onError(e);
+                            }
+                        });
+            }
 
-    enum AnnouncementCodes {
-        SUCCESS_CATEGORIES_LOADED,
-        UNSUCCESS_CATEGORIES_LOADED,
+            @Override
+            public void handleFault(BackendlessFault fault) {
+                Timber.e(fault.toString());
+            }
+        }));
+    }
 
-        SUCCESS_SUBCATEGORIES_LOADED,
-        UNSUCCESS_SUBCATEGORIES_LOADED,
+    public Observable<List<Subcategory>> getSubcategories(@NonNull Context context, @NonNull String idCategory) {
+        DataQueryBuilder builder = DataQueryBuilder.create();
+        builder.setWhereClause("Categories[subcategory].objectId = '" + idCategory + "'");
 
-        SUCCESS_ANNOUNCEMENT_ADDED,
-        UNSUCCESS_ANNOUNCEMENT_ADDED,
 
-        SUCCESS_PICTURES_ADDED,
-        UNSUCCESS_PICTURES_ADDED,
+        return Observable.create(emitter -> Backendless.Data.of("Subcategories").find(builder, new AsyncCallback<List<Map>>() {
+            @Override
+            public void handleResponse(List<Map> response) {
+                Observable.fromIterable(response)
+                        .subscribeOn(Schedulers.io())
+                        .map(map -> Subcategory.convertFromMap(context, map))
+                        .toList()
+                        .observeOn(AndroidSchedulers.mainThread())
+                        .subscribe(new SingleObserver<List<Subcategory>>() {
+                            @Override
+                            public void onSubscribe(Disposable d) {
+                            }
 
-        USER_NOT_FOUND,
-        UNSUCCESS_LOAD_MAIN_PICTURE,
+                            @Override
+                            public void onSuccess(List<Subcategory> categories) {
+                                emitter.onNext(categories);
+                            }
 
-        PHP_INI_NOT_LOADED,
+                            @Override
+                            public void onError(Throwable e) {
+                                emitter.onError(e);
+                            }
+                        });
+            }
 
-        NETWORK_ERROR,
-        NOT_CONNECT_TO_DB,
-        UNKNOW_ERROR
+            @Override
+            public void handleFault(BackendlessFault fault) {
+                Timber.e(fault.toString());
+            }
+        }));
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Authentication/Authentication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Authentication/Authentication.java	(date 1586614473000)
+++ app/src/main/java/com/application/arenda/Entities/Authentication/Authentication.java	(date 1586614473000)
@@ -1,163 +1,118 @@
 package com.application.arenda.Entities.Authentication;
 
 import android.annotation.SuppressLint;
-import android.content.Context;
 
 import androidx.annotation.NonNull;
 
+import com.application.arenda.Entities.Models.User;
 import com.application.arenda.Entities.User.AccountType;
-import com.application.arenda.Entities.User.UserCookie;
-import com.application.arenda.Entities.User.UserProfile;
-import com.application.arenda.Entities.Utils.Network.ApiClient;
-
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.IOException;
-
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.Callback;
-import retrofit2.Response;
-import timber.log.Timber;
+import com.backendless.Backendless;
+import com.backendless.BackendlessUser;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.exceptions.BackendlessFault;
+import com.backendless.persistence.local.UserIdStorageFactory;
 
 public final class Authentication {
     @SuppressLint("StaticFieldLeak")
     private static Authentication instance;
 
-    private OnAuthenticationListener authenticationListener;
-
-    private Context context;
-    private ApiAuthentication authentication;
-
-    private Authentication(@NonNull Context context) {
-        this.context = context;
-
-        authentication = ApiClient.getApi().create(ApiAuthentication.class);
+    private Authentication() {
     }
 
-    public static Authentication getInstance(@NonNull Context context) {
+    public static Authentication getInstance() {
         if (instance == null)
-            instance = new Authentication(context);
+            instance = new Authentication();
 
         return instance;
     }
 
-    private void authentication(@NonNull Response<ResponseBody> response) {
-        String res = null;
-        try {
-            res = response.body().string();
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
-
-        if (res != null) {
-            try {
-                JSONObject object = new JSONObject(res);
-
-                String token = object.getString("token");
-                String message = object.getString("response");
-
-                if (!token.equals("-1"))
-                    UserCookie.putProfile(context, token, new UserProfile());
-
-                if (message != null)
-                    authenticationListener.onComplete(ApiAuthentication.AuthenticationCodes.valueOf(message));
-                else
-                    authenticationListener.onComplete(ApiAuthentication.AuthenticationCodes.NETWORK_ERROR);
-
-            } catch (JSONException e) {
-                Timber.e(e);
-            }
-        }
-    }
-
     public void registration(@NonNull String name,
                              @NonNull String lastName,
+                             @NonNull String login,
                              @NonNull String email,
                              @NonNull String password,
                              @NonNull String phone,
-                             @NonNull AccountType accountType) {
+                             @NonNull AccountType accountType,
+                             @NonNull AsyncCallback<BackendlessUser> callback) {
+
+        BackendlessUser user = new BackendlessUser();
 
+        user.setEmail(email);
+        user.setPassword(password);
 
-        Call<ResponseBody> registrationCall = authentication
-                .registration(name, lastName, email, password, phone, accountType.getType());
+        user.setProperty("name", name);
+        user.setProperty("lastName", lastName);
 
-        registrationCall.enqueue(new Callback<ResponseBody>() {
-            @Override
-            public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
-                authentication(response);
-            }
+        user.setProperty("login", login);
 
-            @Override
-            public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
-                authenticationListener.onFailure(t);
-            }
-        });
+        user.setProperty("phone_1", phone);
+
+        user.setProperty("accountType", accountType.getType());
+
+        Backendless.UserService.register(user, callback);
     }
 
     public void authorization(@NonNull String email,
-                              @NonNull String password) {
-        Call<ResponseBody> registrationCall = authentication
-                .authorization(email, password);
+                              @NonNull String password,
+                              @NonNull AsyncCallback<BackendlessUser> callback) {
+
+        Backendless.UserService.login(email, password, callback, true);
+    }
 
-        registrationCall.enqueue(new Callback<ResponseBody>() {
+    public void restorePassword(@NonNull String email,
+                                @NonNull AsyncCallback<Void> callback) {
+        Backendless.UserService.restorePassword(email, callback);
+    }
+
+    public void getUserData(@NonNull AsyncCallback<User> callback) {
+        Backendless.UserService.isValidLogin(new AsyncCallback<Boolean>() {
             @Override
-            public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
-                authentication(response);
-            }
-
-            @Override
-            public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
-                authenticationListener.onFailure(t);
-            }
-        });
-    }
+            public void handleResponse(Boolean response) {
+                if (response) {
+                    Backendless.Data.of(BackendlessUser.class).findById(getUserID(), new AsyncCallback<BackendlessUser>() {
+                        @Override
+                        public void handleResponse(BackendlessUser response) {
+                            User user = new User();
+
+                            user.setObjectId(response.getObjectId());
+                            user.setName(String.valueOf(response.getProperty("name")));
+                            user.setLastName(String.valueOf(response.getProperty("lastName")));
+
+                            user.setLogin(String.valueOf(response.getProperty("login")));
+                            user.setEmail(String.valueOf(response.getProperty("email")));
+                            user.setUserPhotoUri(String.valueOf(response.getProperty("userPhotoUri")));
+
+                            user.setAddress_1(String.valueOf(response.getProperty("address_1")));
+                            user.setAddress_2(String.valueOf(response.getProperty("address_2")));
+                            user.setAddress_3(String.valueOf(response.getProperty("address_3")));
+
+                            user.setPhone_1(String.valueOf(response.getProperty("phone_1")));
+                            user.setPhone_2(String.valueOf(response.getProperty("phone_2")));
+                            user.setPhone_3(String.valueOf(response.getProperty("phone_3")));
+
+                            user.setAccountType(AccountType.valueOf(String.valueOf(response.getProperty("accountType"))));
+                            user.setBalance(Double.parseDouble(String.valueOf(response.getProperty("balance"))));
+                            user.setRating(Double.parseDouble(String.valueOf(response.getProperty("rating"))));
 
-    public void authorizationUseToken() {
-        String token = UserCookie.getToken(context);
-        if (token != null) {
-            Call<ResponseBody> registrationCall = authentication
-                    .authorizationUseToken(token);
+                            callback.handleResponse(user);
+                        }
 
-            registrationCall.enqueue(new Callback<ResponseBody>() {
-                @Override
-                public void onResponse(@NonNull Call<ResponseBody> call, @NonNull Response<ResponseBody> response) {
-                    String res = null;
-                    try {
-                        res = response.body().string();
-                    } catch (IOException e) {
-                        e.printStackTrace();
-                    }
-
-                    if (res != null) {
-                        try {
-                            JSONObject object = new JSONObject(res);
-
-                            String message = object.getString("response");
-
-                            if (message != null)
-                                authenticationListener.onComplete(ApiAuthentication.AuthenticationCodes.valueOf(message));
-                            else
-                                authenticationListener.onComplete(ApiAuthentication.AuthenticationCodes.NETWORK_ERROR);
-
-                        } catch (JSONException e) {
-                            Timber.e(e);
+                        @Override
+                        public void handleFault(BackendlessFault fault) {
+                            callback.handleFault(fault);
                         }
-                    }
-                }
+                    });
+                }
+            }
 
-                @Override
-                public void onFailure(@NonNull Call<ResponseBody> call, @NonNull Throwable t) {
-                    authenticationListener.onFailure(t);
-                }
-            });
-        } else {
-            authenticationListener.onComplete(ApiAuthentication.AuthenticationCodes.WRONG_TOKEN);
-        }
+            @Override
+            public void handleFault(BackendlessFault fault) {
+                callback.handleFault(fault);
+            }
+        });
     }
 
-    public void setOnAuthenticationListener(OnAuthenticationListener listener) {
-        authenticationListener = listener;
+    private String getUserID() {
+        return UserIdStorageFactory.instance().getStorage().get();
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Authentication/AuthenticationCodes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Authentication/AuthenticationCodes.java	(date 1586526280000)
+++ app/src/main/java/com/application/arenda/Entities/Authentication/AuthenticationCodes.java	(date 1586526280000)
@@ -0,0 +1,16 @@
+package com.application.arenda.Entities.Authentication;
+
+public enum AuthenticationCodes {
+    USER_SUCCESS_REGISTERED,
+    USER_UNSUCCESS_REGISTERED,
+    USER_EXISTS,
+
+    USER_LOGGED,
+    WRONG_PASSWORD,
+    WRONG_EMAIL,
+    WRONG_TOKEN,
+
+    NETWORK_ERROR,
+    NOT_CONNECT_TO_DB,
+    UNKNOW_ERROR
+}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Authentication/OnAuthenticationListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Authentication/OnAuthenticationListener.java	(date 1586526289000)
+++ app/src/main/java/com/application/arenda/Entities/Authentication/OnAuthenticationListener.java	(date 1586526289000)
@@ -3,7 +3,216 @@
 import androidx.annotation.NonNull;
 
 public interface OnAuthenticationListener {
-    void onComplete(@NonNull ApiAuthentication.AuthenticationCodes code);
+    void onComplete(@NonNull AuthenticationCodes code);
 
     void onFailure(@NonNull Throwable t);
-}
\ No newline at end of file
+}
+
+//*
+// Служба пользователей
+
+//3000
+//Пользователь не может войти в систему
+//3001
+//Отсутствует конфигурация входа в систему. Возможно, неверный идентификатор приложения.
+//3002
+//Пользователь уже вошел в систему с другого устройства / компьютера. Приложение настроено на отключение нескольких одновременных входов с одинаковыми учетными данными пользователя.
+//3003
+//Неправильный логин или пароль
+//3004
+//Неверная социальная идентичность для учетной записи пользователя
+//3005
+//Отсутствует параметр "% s."
+//3006
+//Логин или пароль отсутствует или ноль
+//3007
+//Невозможно выйти.
+//3008
+//Отсутствует идентификатор приложения и / или ключ API.
+//3009
+//Регистрация пользователя отключена.
+//3010
+//Динамическое определение свойства отключено.
+//3011
+//Свойство 'пароль' обязательно
+//3012
+//Невозможно зарегистрировать пользователя. Требуется свойство "% s"
+//3013
+//Невозможно зарегистрировать пользователя. Отсутствует значение идентификатора для "% s"
+//3014
+//Невозможно зарегистрировать пользователя. Внешняя регистрация не удалась с сообщением:% s
+//3015
+//Отсутствует параметр "% s"
+//3016
+//Имя свойства зарезервировано для системных целей
+//3017
+//Пользовательское свойство с именем "% s" уже существует
+//3018
+//Пользователь с идентификатором "% s" уже существует
+//3019
+//Отсутствует параметр "% s"
+//3020
+//Невозможно восстановить пароль. Невозможно найти пользователя с указанным именем.
+//3021
+//Невозможно зарегистрировать пользователя из-за ошибки:% s
+//3022
+//Невозможно войти в систему из-за ошибки:% s
+//3023
+//Не удалось выйти из системы из-за ошибки:% s
+//3024
+//Невозможно обновить учетную запись пользователя из-за ошибки:% s
+//3025
+//Невозможно восстановить пароль из-за ошибки:% s
+//3026
+//Не удалось получить пользовательские свойства из-за ошибки:% s
+//3027
+//Неизвестная ошибка:% s
+//3028
+//Невозможно обновить пользователя. Пользователь должен войти в систему
+//3029
+//Невозможно обновить пользователя. Аккаунты пользователей могут обновляться только администратором или самим пользователем.
+//3030
+//Невозможно обновить пользователя. Пользователь не может быть найден.
+//3031
+//Невозможно обновить пользователя. Динамическое определение свойства отключено.
+//3032
+//Невозможно обновить пользователя. Не удалось найти свойства регистрации пользователя
+//3033
+//Невозможно зарегистрировать пользователя. Пользователь уже существует.
+//3034
+//Невозможно войти. Логин пользователя отключен.
+//3036
+//Невозможно войти. Учетная запись пользователя заблокирована из-за слишком большого количества неудачных входов.
+//3038
+//Некоторые из обязательных параметров являются нулевыми
+//3039
+//«objectId» является зарезервированным системным свойством и не допускается при регистрации пользователя.
+//3040
+//Предоставленное письмо имеет неправильный формат.
+//3041
+//Невозможно зарегистрировать пользователя. Отсутствует обязательное значение свойства для "% s"
+//3042
+//Событие с именем "% s" не существует.
+//3043
+//Невозможно зарегистрировать пользователя. Есть те же свойства в запросе.
+//3044
+//Невозможно войти. Достигнуто ограничение на несколько входов в систему для одной учетной записи
+//3045
+//Невозможно обновить пользователя. Обязательные поля пусты.
+//3046
+//Там нет пользователя по умолчанию. Пожалуйста, свяжитесь со службой поддержки.
+//3047
+//Нет системной аутентифицированной роли
+//3048
+//Тайм-аут сеанса. URL: <...>
+//3049
+//Неверный тип значения для свойства "% s".
+//3050
+//Пароль должен быть строковым
+//3051
+//Подтверждение не удалось
+//3052
+//Сбой внешней аутентификации с сообщением "% s"
+//3053
+//Внешняя аутентификация не удалась с сообщением: URL недействителен
+//3054
+//Невозможно зарегистрировать пользователя. Внешняя регистрация не удалась с сообщением: URL недействителен
+//3055
+//Неверный пароль. Операция не разрешена
+//3056
+//«Не удалось изменить тип свойства пользователя, потому что есть пользователи со значениями, которые не могут быть преобразованы в выбранный тип»
+//3057
+//Не удалось найти пользователя по идентификатору или идентификатору
+//3058
+//Не удалось назначить роль пользователю
+//3059
+//Не удалось отменить назначение пользователя
+//3060
+//Не удалось утвердить социальный аккаунт.
+//3061
+//Не удалось найти разрешенный идентификатор приложения Facebook.
+//3062
+//Запрашиваемая заявка Facebook не допускается.
+//3063
+//Количество символов превышает ограничение в 200
+//3064
+//Не удалось получить пользовательские свойства
+//3065
+//Свойство "% s" не может быть удалено
+//3066
+//Не удается создать задачу SendTestEmailTask.
+//3067
+//Невозможно отключить «Шаблон подтверждения», когда включена опция «Требовать подтверждение по электронной почте».
+//3068
+//Невозможно включить параметр «Требовать подтверждение по электронной почте», пока «Шаблон подтверждения» отключен.
+//3069
+//Не удалось получить пользовательские свойства по умолчанию
+//3070
+//Идентификатор пользователя по умолчанию не найден
+//3071
+//Не удалось создать "% s"
+//3072
+//Социальный пользователь не может использовать пароль
+//3073
+//Не удалось изменить свойство пользователя. Обязательное свойство или свойство identity не должно содержать нулевых значений в существующих пользователях.
+//3074
+//Невозможно включить параметр «Требовать подтверждение по электронной почте», пока отсутствует свойство пользователя «Электронная почта».
+//3075
+//«Невозможно запросить восстановление пароля для пользователя, авторизованного в социальной сети»
+//3076
+//«обновление» является зарезервированным системным свойством и не допускается при регистрации
+//3077
+//«создан» является зарезервированным системным свойством и не допускается при регистрации
+//3078
+//Вы не можете зарегистрировать пользователя без значения свойства 'email', пока включена опция 'Требовать подтверждение электронной почты'
+//3079
+//Не удалось удалить свойство «электронная почта», пока «Требуется подтверждение электронной почты» включено
+//3080
+//Неверный или неподдерживаемый URL перенаправленного авторизованного пользователя
+//3081
+//Не удалось получить роли для пользователя.
+//3082
+//Вы должны подтвердить адрес электронной почты
+//3083
+//Невозможно управлять пользователем. Пользователь должен войти в систему.
+//3084
+//Невозможно управлять пользователем. Управлять учетными записями пользователей могут только администраторы или сами.
+//3085
+//Невозможно отключить пользователя. Пользователь уже отключен.
+//3086
+//Невозможно включить пользователя. Пользователь уже включен.
+//3087
+//Невозможно войти. Электронная почта пользователя не подтверждена.
+//3088
+//Свойство 'email' должно быть выбрано как 'обязательное', если включено 'Требовать подтверждение по электронной почте'
+//3089
+//Невозможно включить параметр «Требовать подтверждение по электронной почте», если свойство пользователя «Электронная почта» не требуется
+//3090
+//Учетная запись пользователя отключена
+//3091
+//Тайм-аут сеанса
+//3092
+//Пользователь уже активирован
+//3094
+//Пользователь может обновиться только сам или админ
+//3095
+//Пользователь может быть удален только им самим или администратором
+//3096
+//Личность для социального пользователя не может быть изменена
+//3097
+//Первый вход в систему от социального пользователя
+//3098
+//Массовое обновление запрещено для столбцов идентификаторов:% s
+//3099
+//Регистрация нового пользователя со связанными свойствами не разрешена в режиме внешних данных
+//3100
+//Обновление пользователя со связанными свойствами не допускается в режиме внешних данных
+//3101
+//Восстановление пароля отключено
+//3102
+//Пользователь уже подтвердил адрес электронной почты. Подтверждение по электронной почте не будет отправлено.
+//3103
+//Невозможно отправить подтверждение по электронной почте. Параметр «Требовать подтверждение по электронной почте» должен быть включен в Backendless Console (см. Экран «Пользователи»> «Регистрация»)
+//3104
+//Невозможно отправить подтверждение по электронной почте - невозможно найти учетную запись пользователя с адресом электронной почты.
+// *//
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/Entities/Authentication/ApiAuthentication.java
===================================================================
--- app/src/main/java/com/application/arenda/Entities/Authentication/ApiAuthentication.java	(date 0)
+++ app/src/main/java/com/application/arenda/Entities/Authentication/ApiAuthentication.java	(date 0)
@@ -1,44 +0,0 @@
-package com.application.arenda.Entities.Authentication;
-
-import com.application.arenda.BuildConfig;
-
-import okhttp3.ResponseBody;
-import retrofit2.Call;
-import retrofit2.http.Field;
-import retrofit2.http.FormUrlEncoded;
-import retrofit2.http.POST;
-
-public interface ApiAuthentication {
-    @FormUrlEncoded
-    @POST(BuildConfig.URL_REGISTRATION)
-    Call<ResponseBody> registration(@Field("name") String name,
-                                    @Field("lastName") String lastName,
-                                    @Field("email") String email,
-                                    @Field("password") String password,
-                                    @Field("phone") String phone,
-                                    @Field("accountType") String accountType);
-
-    @FormUrlEncoded
-    @POST(BuildConfig.URL_AUTHORIZATION)
-    Call<ResponseBody> authorization(@Field("email") String email,
-                                     @Field("password") String password);
-
-    @FormUrlEncoded
-    @POST(BuildConfig.URL_AUTHORIZATION_USE_TOKEN)
-    Call<ResponseBody> authorizationUseToken(@Field("token") String token);
-
-    enum AuthenticationCodes {
-        USER_SUCCESS_REGISTERED,
-        USER_UNSUCCESS_REGISTERED,
-        USER_EXISTS,
-
-        USER_LOGGED,
-        WRONG_PASSWORD,
-        WRONG_EMAIL,
-        WRONG_TOKEN,
-
-        NETWORK_ERROR,
-        NOT_CONNECT_TO_DB,
-        UNKNOW_ERROR
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentSelectCategory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentSelectCategory.java	(date 1586673742000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentSelectCategory.java	(date 1586673742000)
@@ -8,20 +8,16 @@
 import android.widget.ImageButton;
 import android.widget.TextView;
 
-import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
 import androidx.recyclerview.widget.LinearLayoutManager;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.application.arenda.Entities.Announcements.Announcement;
 import com.application.arenda.Entities.Announcements.ApiAnnouncement;
-import com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories.CategoriesAdapter;
-import com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories.EventSendID;
-import com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories.SubcategoriesAdapter;
-import com.application.arenda.Entities.Announcements.OnAnnouncementListener;
-import com.application.arenda.Entities.Models.ModelCategory;
-import com.application.arenda.Entities.Models.ModelSubcategory;
-import com.application.arenda.Entities.Utils.Utils;
+import com.application.arenda.Entities.Announcements.Categories.CategoriesAdapter;
+import com.application.arenda.Entities.Announcements.Categories.EventSendID;
+import com.application.arenda.Entities.Announcements.Categories.SubcategoriesAdapter;
+import com.application.arenda.Entities.Models.Category;
+import com.application.arenda.Entities.Models.Subcategory;
 import com.application.arenda.R;
 import com.application.arenda.UI.Components.ActionBar.AdapterActionBar;
 import com.application.arenda.UI.Components.ContainerFragments.ContainerFragments;
@@ -29,8 +25,6 @@
 import org.greenrobot.eventbus.EventBus;
 import org.jetbrains.annotations.Nullable;
 
-import java.net.ConnectException;
-import java.net.SocketTimeoutException;
 import java.util.List;
 
 import butterknife.BindView;
@@ -57,7 +51,7 @@
 
     private Unbinder unbinder;
 
-    private Announcement apiAnnouncement;
+    private ApiAnnouncement apiAnnouncement;
     private CategoriesAdapter categoriesAdapter;
     private CompositeDisposable compositeDisposable;
 
@@ -89,38 +83,13 @@
 
     private void initComponents() {
         categoriesAdapter = new CategoriesAdapter();
-        apiAnnouncement = Announcement.getInstance();
+        apiAnnouncement = ApiAnnouncement.getInstance();
 
         rvCategories.setHasFixedSize(true);
         rvCategories.setLayoutManager(new LinearLayoutManager(getContext(), RecyclerView.VERTICAL, false));
     }
 
     private void initListeners() {
-        OnAnnouncementListener announcementListener = new OnAnnouncementListener() {
-            @Override
-            public void onComplete(@NonNull ApiAnnouncement.AnnouncementCodes code) {
-                switch (code) {
-                    case SUCCESS_CATEGORIES_LOADED:
-                        break;
-
-                    case UNSUCCESS_CATEGORIES_LOADED:
-                    case NOT_CONNECT_TO_DB:
-                    case NETWORK_ERROR:
-                    case UNKNOW_ERROR:
-                        Utils.messageOutput(getContext(), getString(R.string.error_check_internet_connect));
-                        break;
-                }
-            }
-
-            @Override
-            public void onFailure(@NonNull Throwable t) {
-                Timber.e(t);
-                if (t instanceof SocketTimeoutException || t instanceof ConnectException) {
-                    Utils.messageOutput(getContext(), getString(R.string.error_check_internet_connect));
-                }
-            }
-        };
-
         categoriesAdapter.setOnClickCategory((idCategory, rvItemCategory) -> {
 
             if (rvItemCategory.getAdapter() == null || rvItemCategory.getAdapter().getItemCount() == 0) {
@@ -128,23 +97,25 @@
                 SubcategoriesAdapter adapter = new SubcategoriesAdapter();
 
                 adapter.setItemClick((viewHolder, model) -> {
-                    EventBus.getDefault().post(new EventSendID((int) model.getID(), ((ModelSubcategory) model).getName()));
+                    EventBus.getDefault().post(new EventSendID(model.getObjectId(), ((Subcategory) model).getName()));
 
                     ContainerFragments.getInstance(getContext()).popBackStack();
                 });
 
-                apiAnnouncement.getSubcategories(idCategory, announcementListener)
+                apiAnnouncement.getSubcategories(getContext(), idCategory)
                         .subscribeOn(Schedulers.io())
                         .observeOn(AndroidSchedulers.mainThread())
-                        .subscribe(new Observer<List<ModelSubcategory>>() {
+                        .subscribe(new Observer<List<Subcategory>>() {
                             @Override
                             public void onSubscribe(Disposable d) {
                                 compositeDisposable.add(d);
                             }
 
                             @Override
-                            public void onNext(List<ModelSubcategory> modelSubcategories) {
+                            public void onNext(List<Subcategory> modelSubcategories) {
+                                rvItemCategory.setLayoutManager(new LinearLayoutManager(rvItemCategory.getContext(), RecyclerView.VERTICAL, false));
                                 adapter.addToCollection(modelSubcategories);
+                                rvItemCategory.setAdapter(adapter);
                             }
 
                             @Override
@@ -154,27 +125,29 @@
 
                             @Override
                             public void onComplete() {
-                                rvItemCategory.setLayoutManager(new LinearLayoutManager(rvItemCategory.getContext(), RecyclerView.VERTICAL, false));
-                                rvItemCategory.setAdapter(adapter);
+
                             }
                         });
             }
         });
     }
 
+    @SuppressLint("CheckResult")
     private void initAdapters() {
-        apiAnnouncement.getCategories(null)
+        apiAnnouncement.getCategories(getContext())
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<List<ModelCategory>>() {
+                .subscribe(new Observer<List<Category>>() {
                     @Override
                     public void onSubscribe(Disposable d) {
                         compositeDisposable.add(d);
                     }
 
                     @Override
-                    public void onNext(List<ModelCategory> modelCategories) {
-                        categoriesAdapter.addToCollection(modelCategories);
+                    public void onNext(List<Category> categories) {
+                        rvCategories.setLayoutManager(new LinearLayoutManager(getContext(), RecyclerView.VERTICAL, false));
+                        categoriesAdapter.addToCollection(categories);
+                        rvCategories.setAdapter(categoriesAdapter);
                     }
 
                     @Override
@@ -184,8 +157,7 @@
 
                     @Override
                     public void onComplete() {
-                        rvCategories.setLayoutManager(new LinearLayoutManager(getContext(), RecyclerView.VERTICAL, false));
-                        rvCategories.setAdapter(categoriesAdapter);
+
                     }
                 });
     }
Index: app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentAllAnnouncements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentAllAnnouncements.java	(date 1586530310000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentAllAnnouncements.java	(date 1586530310000)
@@ -22,8 +22,6 @@
 import com.application.arenda.Entities.Announcements.InsertToFavorite.InsertToFavorite;
 import com.application.arenda.Entities.Announcements.LoadingAnnouncements.AllAnnouncements.AllAnnouncementsAdapter;
 import com.application.arenda.Entities.Announcements.LoadingAnnouncements.AllAnnouncements.AllAnnouncementsVH;
-import com.application.arenda.Entities.Announcements.LoadingAnnouncements.LoadingAnnouncements;
-import com.application.arenda.Entities.Models.ModelAllAnnouncement;
 import com.application.arenda.Entities.RecyclerView.RVOnScrollListener;
 import com.application.arenda.Entities.Utils.Utils;
 import com.application.arenda.R;
@@ -33,8 +31,6 @@
 import com.application.arenda.UI.Components.SideBar.SideBar;
 import com.application.arenda.UI.DisplayUtils;
 
-import java.util.List;
-
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
@@ -69,7 +65,6 @@
     private RVOnScrollListener rvOnScrollListener;
     private AllAnnouncementsAdapter allAnnouncementsAdapter;
 
-    private LoadingAnnouncements loadData;
     private InsertToFavorite insertToFavorite = new InsertToFavorite();
 
     private String searchQuery;
@@ -100,7 +95,6 @@
     }
 
     private void init() {
-        loadData = new LoadingAnnouncements(getContext());
         rvLayoutManager = new LinearLayoutManager(getContext(), RecyclerView.VERTICAL, false);
 
         containerFragments = ContainerFragments.getInstance(getContext());
@@ -109,7 +103,7 @@
         initStyles();
         initListeners();
 
-        loadListAnnouncement(0);
+        loadListAnnouncement("0");
     }
 
     private void initAdapters() {
@@ -130,11 +124,11 @@
         rvOnScrollListener.setRVAdapter(allAnnouncementsAdapter);
         recyclerView.setAdapter(allAnnouncementsAdapter);
 
-        allAnnouncementsAdapter.setItemViewClick((viewHolder, model) -> onItemClick(model.getID()));
+        allAnnouncementsAdapter.setItemViewClick((viewHolder, model) -> onItemClick(model.getObjectId()));
 
         allAnnouncementsAdapter.setItemHeartClick((viewHolder, model) -> insertToFavorite
                 .insertToFavorite(getContext(), BuildConfig.URL_INSERT_TO_FAVORITE,
-                        model.getID())
+                        model.getObjectId())
                 .subscribeOn(Schedulers.io())
                 .observeOn(AndroidSchedulers.mainThread())
                 .subscribe(new Observer<Boolean>() {
@@ -182,111 +176,29 @@
         rvOnScrollListener.setOnLoadMoreData(lastID -> searchAnnouncements(searchQuery, lastID));
     }
 
-    public void loadListAnnouncement(long lastID) {
-        if (!allAnnouncementsAdapter.isLoading()) {
-            allAnnouncementsAdapter.setLoading(true);
-
-
-            loadData.loadAllAnnouncements(lastID, 10, BuildConfig.URL_LOADING_ALL_ANNOUNCEMENT)
-                    .subscribeOn(Schedulers.io())
-                    .observeOn(AndroidSchedulers.mainThread())
-                    .subscribe(new Observer<List<ModelAllAnnouncement>>() {
-                        @Override
-                        public void onSubscribe(Disposable d) {
-
-                        }
-
-                        @Override
-                        public void onNext(List<ModelAllAnnouncement> collection) {
-                            allAnnouncementsAdapter.addToCollection(collection);
-                        }
+    public void loadListAnnouncement(String lastID) {
 
-                        @Override
-                        public void onError(Throwable e) {
-                        }
-
-                        @Override
-                        public void onComplete() {
-                            allAnnouncementsAdapter.setLoading(false);
-                            swipeRefreshLayout.setRefreshing(false);
-
-                        }
-                    });
-        }
     }
 
     public void refreshLayout() {
-        if (!allAnnouncementsAdapter.isLoading()) {
-            allAnnouncementsAdapter.setLoading(true);
-
-
-            loadData.loadAllAnnouncements(0, 10, BuildConfig.URL_LOADING_ALL_ANNOUNCEMENT)
-                    .subscribeOn(Schedulers.io())
-                    .observeOn(AndroidSchedulers.mainThread())
-                    .subscribe(new Observer<List<ModelAllAnnouncement>>() {
-                        @Override
-                        public void onSubscribe(Disposable d) {
-                        }
-
-                        @Override
-                        public void onNext(List<ModelAllAnnouncement> collection) {
-                            allAnnouncementsAdapter.rewriteCollection(collection);
-                        }
 
-                        @Override
-                        public void onError(Throwable e) {
-                        }
+    }
 
-                        @Override
-                        public void onComplete() {
-                            allAnnouncementsAdapter.setLoading(false);
-                            swipeRefreshLayout.setRefreshing(false);
-
-                        }
-                    });
-        }
-    }
-
-    private void onItemClick(long idAnnouncement) {
+    private void onItemClick(String idAnnouncement) {
         FragmentViewAnnouncement announcement = new FragmentViewAnnouncement();
         Bundle bundle = new Bundle();
-        bundle.putLong("idAnnouncement", idAnnouncement);
+        bundle.putString("idAnnouncement", idAnnouncement);
         announcement.setArguments(bundle);
 
         containerFragments.add(announcement);
     }
 
-    public void searchAnnouncements(String query, long lastId) {
+    public void searchAnnouncements(String query, String lastId) {
         if (!allAnnouncementsAdapter.isLoading()) {
             allAnnouncementsAdapter.setLoading(true);
             swipeRefreshLayout.setRefreshing(true);
 
 
-            loadData.searchToAllAnnouncements(lastId, 10, query, BuildConfig.URL_LOADING_ALL_ANNOUNCEMENT)
-                    .subscribeOn(Schedulers.io())
-                    .observeOn(AndroidSchedulers.mainThread())
-                    .subscribe(new Observer<List<ModelAllAnnouncement>>() {
-                        @Override
-                        public void onSubscribe(Disposable d) {
-
-                        }
-
-                        @Override
-                        public void onNext(List<ModelAllAnnouncement> modelAllAnnouncements) {
-                            allAnnouncementsAdapter.rewriteCollection(modelAllAnnouncements);
-                        }
-
-                        @Override
-                        public void onError(Throwable e) {
-                        }
-
-                        @Override
-                        public void onComplete() {
-                            allAnnouncementsAdapter.setLoading(false);
-                            swipeRefreshLayout.setRefreshing(false);
-
-                        }
-                    });
         }
     }
 
@@ -348,7 +260,7 @@
 
                 if (!searchQuery.isEmpty()) {
                     itemHeaderName.setText(searchQuery);
-                    searchAnnouncements(searchQuery, 0);
+                    searchAnnouncements(searchQuery, "0");
 
                     setLoadMoreForSearchAnnouncement();
                 } else {
Index: app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentViewAnnouncement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentViewAnnouncement.java	(date 1586532134000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentViewAnnouncement.java	(date 1586532134000)
@@ -23,10 +23,7 @@
 
 import com.application.arenda.BuildConfig;
 import com.application.arenda.Entities.Announcements.InsertToFavorite.InsertToFavorite;
-import com.application.arenda.Entities.Models.ModelViewAnnouncement;
 import com.application.arenda.Entities.Announcements.ViewAnnouncement.AdapterViewPager;
-import com.application.arenda.Entities.Models.ModelPhoneNumber;
-import com.application.arenda.Entities.Announcements.ViewAnnouncement.LoadingViewAnnouncement;
 import com.application.arenda.Entities.Announcements.ViewAnnouncement.ModelViewPager;
 import com.application.arenda.Entities.Utils.PermissionUtils;
 import com.application.arenda.Entities.Utils.Utils;
@@ -112,11 +109,10 @@
     private ViewPager.OnPageChangeListener pageListener;
 
     private InsertToFavorite favorite = new InsertToFavorite();
-    private LoadingViewAnnouncement announcement = new LoadingViewAnnouncement();
 
-    private long idAnnouncement;
+    private String idAnnouncement;
 
-    private List<ModelPhoneNumber> phoneNumbers = new ArrayList<>();
+    private List<String> phoneNumbers = new ArrayList<>();
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
@@ -126,7 +122,7 @@
 
         Bundle bundle = getArguments();
 
-        idAnnouncement = bundle != null ? bundle.getLong("idAnnouncement") : 0;
+        idAnnouncement = bundle != null ? bundle.getString("idAnnouncement") : "";
 
         loadData();
 
@@ -147,53 +143,10 @@
     private void loadData() {
         setProgress(true);
 
-        announcement.loadAnnouncement(getContext(), BuildConfig.URL_LOADING_VIEW_ANNOUNCEMENT, idAnnouncement)
-                .subscribeOn(Schedulers.io())
-                .observeOn(AndroidSchedulers.mainThread())
-                .subscribe(new Observer<ModelViewAnnouncement>() {
-                    @Override
-                    public void onSubscribe(Disposable d) {
 
-                    }
+    }
 
-                    @Override
-                    public void onNext(ModelViewAnnouncement model) {
-                        phoneNumbers.addAll(model.getPhoneNumbers());
-
-                        textPlacementDate.setText(model.getPlacementDate());
-                        textNameProduct.setText(model.getName());
-
-                        //будет браться стоимость в зависимости от настроек по умолчанию
-                        textCostProduct.setText(model.getCostToBYN() + " руб./ч.");
-
-                        textAddress.setText(model.getAddress());
-                        textRating.setText(String.valueOf(model.getRate()));
-                        textCountRent.setText(String.valueOf(model.getCountRent()));
-
-                        textDescriptionProduct.setText(model.getDescription());
-
-                        btnInsertToFavorite.setOnClickListener(v -> onClickFavorite(model.getID()));
-
-                        selectHeart(model.isFavorite());
-
-                        initViewPager(model.getUriCollection());
-
-                        setProgress(false);
-                    }
-
-                    @Override
-                    public void onError(Throwable e) {
-                        setProgress(false);
-                    }
-
-                    @Override
-                    public void onComplete() {
-                        setProgress(false);
-                    }
-                });
-    }
-
-    public void onClickFavorite(long idAnnouncement) {
+    public void onClickFavorite(String idAnnouncement) {
         favorite.insertToFavorite(getContext(), BuildConfig.URL_INSERT_TO_FAVORITE,
                 idAnnouncement)
                 .subscribeOn(Schedulers.io())
@@ -290,7 +243,7 @@
                 String[] array = new String[phoneNumbers.size()];
 
                 for (int i = 0; i < phoneNumbers.size(); i++) {
-                    array[i] = phoneNumbers.get(i).getNumber();
+                    array[i] = phoneNumbers.get(i);
                 }
 
                 AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
@@ -301,14 +254,12 @@
                     if (!PermissionUtils.Check_CALL_PHONE(getActivity()))
                         PermissionUtils.Request_CALL_PHONE(getActivity(), 4322);
                     else
-                        getActivity().startActivity(new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + phoneNumbers.get(which).getNumber())));
+                        getActivity().startActivity(new Intent(Intent.ACTION_CALL, Uri.parse("tel:" + phoneNumbers.get(which))));
                 });
 
                 builder.create();
 
                 builder.show();
-
-//                new DialogCallPhoneNumber(phoneNumbers).show(getActivity().getSupportFragmentManager(), DialogCallPhoneNumber.TAG);
             } else
                 Utils.messageOutput(getContext(), getContext().getResources().getString(R.string.dialog_phone_number_not_found));
         });
Index: app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentUserAnnouncements.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentUserAnnouncements.java	(date 1586530310000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentUserAnnouncements.java	(date 1586530310000)
@@ -19,10 +19,7 @@
 import androidx.recyclerview.widget.RecyclerView;
 import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
 
-import com.application.arenda.BuildConfig;
-import com.application.arenda.Entities.Announcements.LoadingAnnouncements.LoadingAnnouncements;
 import com.application.arenda.Entities.Announcements.LoadingAnnouncements.UserAnnouncements.UserAnnouncementsAdapter;
-import com.application.arenda.Entities.Models.ModelUserAnnouncement;
 import com.application.arenda.Entities.RecyclerView.RVOnScrollListener;
 import com.application.arenda.Entities.Utils.Utils;
 import com.application.arenda.R;
@@ -31,15 +28,9 @@
 import com.application.arenda.UI.Components.SideBar.SideBar;
 import com.application.arenda.UI.DisplayUtils;
 
-import java.util.List;
-
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
-import io.reactivex.Observer;
-import io.reactivex.android.schedulers.AndroidSchedulers;
-import io.reactivex.disposables.Disposable;
-import io.reactivex.schedulers.Schedulers;
 
 public final class FragmentUserAnnouncements extends Fragment implements AdapterActionBar, ItemSideBar {
     @SuppressLint("StaticFieldLeak")
@@ -67,7 +58,6 @@
 
     private String searchQuery;
 
-    private LoadingAnnouncements loadData;
     private LinearLayoutManager rvLayoutManager;
     private RVOnScrollListener rvOnScrollListener;
     private UserAnnouncementsAdapter userAnnouncementsAdapter;
@@ -90,14 +80,13 @@
     }
 
     private void init() {
-        loadData = new LoadingAnnouncements(getContext());
         rvLayoutManager = new LinearLayoutManager(getContext(), RecyclerView.VERTICAL, false);
 
         initAdapters();
         initStyles();
         initListeners();
 
-        loadListAnnouncement(0);
+        loadListAnnouncement("0");
     }
 
     private void initAdapters() {
@@ -138,100 +127,16 @@
         setLoadMoreForUserAnnouncements();
     }
 
-    public void loadListAnnouncement(long lastID) {
-        if (!userAnnouncementsAdapter.isLoading()) {
-            userAnnouncementsAdapter.setLoading(true);
-
-            loadData.loadUserAnnouncements(lastID, 10, BuildConfig.URL_LOADING_USER_ANNOUNCEMENT)
-                    .subscribeOn(Schedulers.io())
-                    .observeOn(AndroidSchedulers.mainThread())
-                    .subscribe(new Observer<List<ModelUserAnnouncement>>() {
-                        @Override
-                        public void onSubscribe(Disposable d) {
+    public void loadListAnnouncement(String lastID) {
 
-                        }
-
-                        @Override
-                        public void onNext(List<ModelUserAnnouncement> collection) {
-                            userAnnouncementsAdapter.addToCollection(collection);
-                        }
-
-                        @Override
-                        public void onError(Throwable e) {
-                        }
-
-                        @Override
-                        public void onComplete() {
-                            userAnnouncementsAdapter.setLoading(false);
-                            swipeRefreshLayout.setRefreshing(false);
-
-                        }
-                    });
-        }
     }
 
     public void refreshLayout() {
-        if (!userAnnouncementsAdapter.isLoading()) {
-            userAnnouncementsAdapter.setLoading(true);
-
-            loadData.loadUserAnnouncements(0, 10, BuildConfig.URL_LOADING_USER_ANNOUNCEMENT)
-                    .subscribeOn(Schedulers.io())
-                    .observeOn(AndroidSchedulers.mainThread())
-                    .subscribe(new Observer<List<ModelUserAnnouncement>>() {
-                        @Override
-                        public void onSubscribe(Disposable d) {
-                        }
-
-                        @Override
-                        public void onNext(List<ModelUserAnnouncement> collection) {
-                            userAnnouncementsAdapter.rewriteCollection(collection);
-                        }
-
-                        @Override
-                        public void onError(Throwable e) {
-                        }
-
-                        @Override
-                        public void onComplete() {
-                            userAnnouncementsAdapter.setLoading(false);
-                            swipeRefreshLayout.setRefreshing(false);
 
-                        }
-                    });
-        }
     }
 
-    public void searchAnnouncements(String query, long lastID) {
-        if (!userAnnouncementsAdapter.isLoading()) {
-            userAnnouncementsAdapter.setLoading(true);
-            swipeRefreshLayout.setRefreshing(true);
+    public void searchAnnouncements(String query, String lastID) {
 
-            loadData.searchToUserAnnouncements(lastID, 10, query, BuildConfig.URL_LOADING_USER_ANNOUNCEMENT)
-                    .subscribeOn(Schedulers.io())
-                    .observeOn(AndroidSchedulers.mainThread())
-                    .subscribe(new Observer<List<ModelUserAnnouncement>>() {
-                        @Override
-                        public void onSubscribe(Disposable d) {
-
-                        }
-
-                        @Override
-                        public void onNext(List<ModelUserAnnouncement> modelUserAnnouncements) {
-                            userAnnouncementsAdapter.rewriteCollection(modelUserAnnouncements);
-                        }
-
-                        @Override
-                        public void onError(Throwable e) {
-                        }
-
-                        @Override
-                        public void onComplete() {
-                            userAnnouncementsAdapter.setLoading(false);
-                            swipeRefreshLayout.setRefreshing(false);
-
-                        }
-                    });
-        }
     }
 
     private void setLoadMoreForUserAnnouncements() {
@@ -300,7 +205,7 @@
 
                 if (!searchQuery.isEmpty()) {
                     itemHeaderName.setText(searchQuery);
-                    searchAnnouncements(searchQuery, 0);
+                    searchAnnouncements(searchQuery, "0");
 
                     setLoadMoreForSearchAnnouncement();
                 } else {
Index: app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentInsertAnnouncement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentInsertAnnouncement.java	(date 1586676546000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Fragments/FragmentInsertAnnouncement.java	(date 1586676546000)
@@ -20,10 +20,9 @@
 import androidx.fragment.app.Fragment;
 import androidx.recyclerview.widget.RecyclerView;
 
-import com.application.arenda.Entities.Announcements.Announcement;
 import com.application.arenda.Entities.Announcements.ApiAnnouncement;
-import com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories.EventSendID;
-import com.application.arenda.Entities.Models.ModelInsertAnnouncement;
+import com.application.arenda.Entities.Announcements.Categories.EventSendID;
+import com.application.arenda.Entities.Models.Announcement;
 import com.application.arenda.Entities.Utils.DecimalDigitsInputFilter;
 import com.application.arenda.Entities.Utils.Utils;
 import com.application.arenda.R;
@@ -41,8 +40,6 @@
 import org.greenrobot.eventbus.EventBus;
 import org.greenrobot.eventbus.Subscribe;
 
-import java.util.ArrayList;
-
 import butterknife.BindView;
 import butterknife.ButterKnife;
 import butterknife.Unbinder;
@@ -51,7 +48,6 @@
 import io.reactivex.disposables.CompositeDisposable;
 import io.reactivex.disposables.Disposable;
 import io.reactivex.schedulers.Schedulers;
-import timber.log.Timber;
 
 public final class FragmentInsertAnnouncement extends Fragment implements ItemSideBar, AdapterActionBar, AdapterGalery {
     @SuppressLint("StaticFieldLeak")
@@ -106,15 +102,15 @@
 
     private SideBar sideBar;
     private Unbinder unbinder;
-    private Announcement apiAnnouncement;
+    private ApiAnnouncement apiAnnouncement;
     private ContainerFiller containerFiller = new ContainerFiller();
-    private ModelInsertAnnouncement announcement = new ModelInsertAnnouncement();
+    private Announcement announcement = new Announcement();
 
     private ContainerFragments containerFragments;
 
     private CompositeDisposable compositeDisposable = new CompositeDisposable();
 
-    private int selectedSubcategory = -1;
+    private String selectedSubcategory = "-1";
 
     private FragmentInsertAnnouncement() {
         notificationCompatLoadImage = new NotificationCompat.Builder(getContext(), CHANNEL_LOADING_IMAGES_CODE);
@@ -142,7 +138,7 @@
     }
 
     private void initComponents() {
-        apiAnnouncement = Announcement.getInstance();
+        apiAnnouncement = ApiAnnouncement.getInstance();
         containerFragments = ContainerFragments.getInstance(getContext());
 
         containerSelectedImages.setAdapterGalery(this);
@@ -180,82 +176,57 @@
         btnCreateAnnouncement.setOnClickListener(v -> {
             if (containerFiller.getSize() > 0 &&
                     !Utils.fieldIsEmpty(getContext(), fieldProductName, fieldProductDescription, fieldCostProduct)) {
-                announcement.setUrisBitmap(new ArrayList<>(containerFiller.getUris()));
-                announcement.setMainUriBitmap(containerFiller.getFirstUri());
+//                announcement.setUrisBitmap(new ArrayList<>(containerFiller.getUris()));
+//                announcement.setMainUriBitmap(containerFiller.getFirstUri());
 
                 announcement.setName(fieldProductName.getText().toString());
-                announcement.setIdSubcategory(selectedSubcategory);
+                announcement.addSubcategory(selectedSubcategory);
                 announcement.setDescription(fieldProductDescription.getText().toString());
 
-                announcement.setCostToBYN(Float.parseFloat(fieldCostProduct.getText().toString()));
-                announcement.setCostToUSD(0f);
-                announcement.setCostToEUR(0f);
+                announcement.setCostToBYN(Double.parseDouble(fieldCostProduct.getText().toString()));
+                announcement.setCostToUSD(0d);
+                announcement.setCostToEUR(0d);
 
                 announcement.setAddress("адрес");
 
                 announcement.setPhone_1("+375(29)659-50-73");
-                announcement.setVisiblePhone_1(true);
 
                 announcement.setPhone_2("+375(29)681-37-83");
-                announcement.setVisiblePhone_2(false);
 
                 announcement.setPhone_3("+375(44)702-04-50");
-                announcement.setVisiblePhone_3(false);
 
                 insertAnnouncement(announcement);
             }
         });
     }
 
-    public void insertAnnouncement(@NonNull ModelInsertAnnouncement announcement) {
-        if (announcement != null) {
-            this.apiAnnouncement.insertAnnouncement(getContext(), announcement)
-                    .subscribeOn(Schedulers.io())
-                    .observeOn(AndroidSchedulers.mainThread())
-                    .subscribe(new Observer<ApiAnnouncement.AnnouncementCodes>() {
-                        @Override
-                        public void onSubscribe(Disposable d) {
-                            compositeDisposable.add(d);
-                        }
+    public void insertAnnouncement(@NonNull Announcement announcement) {
+        apiAnnouncement.insertAnnouncement(announcement)
+                .subscribeOn(Schedulers.io())
+                .observeOn(AndroidSchedulers.mainThread())
+                .subscribe(new Observer<Boolean>() {
+                    @Override
+                    public void onSubscribe(Disposable d) {
+                        compositeDisposable.add(d);
+                    }
 
-                        @Override
-                        public void onNext(ApiAnnouncement.AnnouncementCodes announcementCodes) {
-                            switch (announcementCodes) {
-                                case SUCCESS_ANNOUNCEMENT_ADDED:
-                                case SUCCESS_PICTURES_ADDED:
-                                    resetComponents();
-                                    Utils.messageOutput(getContext(), getString(R.string.success_announcement_added));
-                                    break;
-
-                                case USER_NOT_FOUND:
-                                    Utils.messageOutput(getContext(), getString(R.string.error_user_not_found));
-                                    break;
-
-                                case NETWORK_ERROR:
-                                    Utils.messageOutput(getContext(), getString(R.string.error_check_internet_connect));
-                                    break;
-
-                                case PHP_INI_NOT_LOADED:
-                                    throw new IllegalArgumentException(ApiAnnouncement.AnnouncementCodes.PHP_INI_NOT_LOADED.name());
-
-                                case UNSUCCESS_ANNOUNCEMENT_ADDED:
-                                case UNKNOW_ERROR:
-                                    Utils.messageOutput(getContext(), getString(R.string.unknown_error));
-                                    break;
-                            }
-                        }
+                    @Override
+                    public void onNext(Boolean aBoolean) {
+                        if (aBoolean) {
+                            resetComponents();
+                        }
+                    }
 
-                        @Override
-                        public void onError(Throwable e) {
-                            Timber.e(e);
-                        }
+                    @Override
+                    public void onError(Throwable e) {
+
+                    }
 
-                        @Override
-                        public void onComplete() {
+                    @Override
+                    public void onComplete() {
 
-                        }
-                    });
-        }
+                    }
+                });
     }
 
     private void resetComponents() {
Index: app/src/main/java/com/application/arenda/MainWorkspace/Activities/AppController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Activities/AppController.java	(date 1586641940000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Activities/AppController.java	(date 1586641940000)
@@ -3,14 +3,26 @@
 import android.app.Application;
 
 import com.application.arenda.BuildConfig;
+import com.backendless.Backendless;
+import com.jakewharton.threetenabp.AndroidThreeTen;
 
 import timber.log.Timber;
 
 public class AppController extends Application {
+
     @Override
     public void onCreate() {
         super.onCreate();
 
+        initApi();
+    }
+
+    private void initApi() {
+        AndroidThreeTen.init(this);
+
+        Backendless.setUrl(BuildConfig.BackendlessURL);
+        Backendless.initApp(this, BuildConfig.BackendlessAppID, BuildConfig.BackendlessApiKey);
+
         if (BuildConfig.DEBUG) {
             Timber.plant(new Timber.DebugTree());
         }
Index: app/src/main/java/com/application/arenda/MainWorkspace/Activities/ActivityRegistration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Activities/ActivityRegistration.java	(date 1586475715000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Activities/ActivityRegistration.java	(date 1586475715000)
@@ -1,6 +1,5 @@
 package com.application.arenda.MainWorkspace.Activities;
 
-import android.content.Intent;
 import android.os.Bundle;
 import android.view.View;
 import android.widget.Button;
@@ -9,12 +8,9 @@
 import android.widget.ProgressBar;
 import android.widget.RadioGroup;
 
-import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
-import com.application.arenda.Entities.Authentication.ApiAuthentication;
 import com.application.arenda.Entities.Authentication.Authentication;
-import com.application.arenda.Entities.Authentication.OnAuthenticationListener;
 import com.application.arenda.Entities.User.AccountType;
 import com.application.arenda.Entities.Utils.Utils;
 import com.application.arenda.R;
@@ -22,9 +18,9 @@
 import com.application.arenda.UI.SetDrawableImageViews;
 import com.application.arenda.UI.Style.SetBtnStyle;
 import com.application.arenda.UI.Style.SetFieldStyle;
-
-import java.net.ConnectException;
-import java.net.SocketTimeoutException;
+import com.backendless.BackendlessUser;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.exceptions.BackendlessFault;
 
 import timber.log.Timber;
 
@@ -33,11 +29,13 @@
     private RadioGroup radioGroup;
     private ImageView imagePinReg;
     private EditText
+            fieldNameReg,
             fieldLastNameReg,
+            fieldLoginReg,
             fieldEmailReg,
-            fieldPhoneReg,
-            fieldNameReg,
-            fieldPassReg;
+            fieldPassReg,
+            fieldConfirmPassReg,
+            fieldPhoneReg;
 
     private Button btnReg;
 
@@ -65,15 +63,20 @@
 
         progressBarReg = findViewById(R.id.progressBarReg);
 
+        fieldNameReg = findViewById(R.id.fieldNameReg);
         fieldLastNameReg = findViewById(R.id.fieldLastNameReg);
+
+        fieldLoginReg = findViewById(R.id.fieldLoginReg);
         fieldEmailReg = findViewById(R.id.fieldEmailReg);
+
+        fieldPassReg = findViewById(R.id.fieldPassReg);
+        fieldConfirmPassReg = findViewById(R.id.fieldConfirmPassReg);
+
         fieldPhoneReg = findViewById(R.id.fieldPhoneReg);
-        fieldNameReg = findViewById(R.id.fieldNameReg);
-        fieldPassReg = findViewById(R.id.fieldPassReg);
 
         btnReg = findViewById(R.id.btnReg);
 
-        authentication = Authentication.getInstance(getApplicationContext());
+        authentication = Authentication.getInstance();
         Utils.setPhoneMask(getResources().getString(R.string.hint_phone), fieldPhoneReg);
     }
 
@@ -84,8 +87,10 @@
         SetFieldStyle.setEditTextBackground(new ComponentBackground(this, R.color.colorWhite,
                         R.color.shadowColor, 6f, 0f, 3f, 20f), fieldNameReg,
                 fieldLastNameReg,
+                fieldLoginReg,
                 fieldEmailReg,
                 fieldPassReg,
+                fieldConfirmPassReg,
                 fieldPhoneReg);
 
         SetBtnStyle.setStyle(new ComponentBackground(this, R.color.colorAccent,
@@ -93,67 +98,50 @@
     }
 
     private void initListeners() {
-        authentication.setOnAuthenticationListener(new OnAuthenticationListener() {
-            @Override
-            public void onComplete(@NonNull ApiAuthentication.AuthenticationCodes code) {
-                switch (code) {
-                    case USER_EXISTS:
-                        progressBarReg.setVisibility(View.INVISIBLE);
-                        fieldEmailReg.setError(getString(R.string.error_user_exists));
-                        break;
-                    case USER_SUCCESS_REGISTERED:
-                        progressBarReg.setVisibility(View.INVISIBLE);
-
-                        Intent intent = new Intent(ActivityRegistration.this, ActivityMain.class);
-                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
-
-                        startActivity(intent);
-
-                        finish();
-                        break;
-
-                    case USER_UNSUCCESS_REGISTERED:
-                    case UNKNOW_ERROR:
-                    case NETWORK_ERROR:
-                    case NOT_CONNECT_TO_DB:
-                        progressBarReg.setVisibility(View.INVISIBLE);
-                        Utils.messageOutput(ActivityRegistration.this, getString(R.string.error_check_internet_connect));
-                        break;
-                }
-            }
-
-            @Override
-            public void onFailure(@NonNull Throwable t) {
-                Timber.e(t);
-                progressBarReg.setVisibility(View.INVISIBLE);
-                if (t instanceof SocketTimeoutException || t instanceof ConnectException) {
-                    Utils.messageOutput(ActivityRegistration.this, getString(R.string.error_check_internet_connect));
-                }
-            }
-        });
-
         btnReg.setOnClickListener(v -> {
             if (!Utils.fieldIsEmpty(getApplicationContext(),
                     fieldNameReg,
                     fieldLastNameReg,
+                    fieldLoginReg,
                     fieldEmailReg,
                     fieldPhoneReg,
-                    fieldPassReg)
-                    &&
+                    fieldPassReg) &&
+
                     Utils.isEmail(getApplicationContext(), fieldEmailReg) &&
 
                     Utils.textIsAlphabet(getApplicationContext(),
                             fieldNameReg,
-                            fieldLastNameReg)
-                    && !Utils.isWeakPassword(getApplicationContext(), fieldPassReg)) {
+                            fieldLastNameReg) &&
+
+                    !Utils.isWeakPassword(getApplicationContext(), fieldPassReg) &&
+
+                    Utils.isConfirmPassword(getApplicationContext(), fieldPassReg, fieldConfirmPassReg)) {
                 progressBarReg.setVisibility(View.VISIBLE);
 
                 authentication.registration(fieldNameReg.getText().toString().trim(),
                         fieldLastNameReg.getText().toString().trim(),
+                        fieldLoginReg.getText().toString().trim(),
                         fieldEmailReg.getText().toString().trim(),
                         fieldPassReg.getText().toString().trim(),
                         fieldPhoneReg.getText().toString().trim(),
-                        getAccountType());
+                        getAccountType(),
+                        new AsyncCallback<BackendlessUser>() {
+                            @Override
+                            public void handleResponse(BackendlessUser response) {
+                                progressBarReg.setVisibility(View.INVISIBLE);
+
+                                onBackPressed();
+                                finish();
+                            }
+
+                            @Override
+                            public void handleFault(BackendlessFault fault) {
+                                progressBarReg.setVisibility(View.INVISIBLE);
+
+                                Utils.messageOutput(getApplicationContext(), "Error: - " + fault.getMessage());
+                                Timber.e(fault.getMessage());
+                            }
+                        });
             }
         });
     }
Index: app/src/main/java/com/application/arenda/MainWorkspace/Activities/ActivityAuthorization.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/application/arenda/MainWorkspace/Activities/ActivityAuthorization.java	(date 1586475701000)
+++ app/src/main/java/com/application/arenda/MainWorkspace/Activities/ActivityAuthorization.java	(date 1586475701000)
@@ -7,27 +7,26 @@
 import android.widget.EditText;
 import android.widget.ImageView;
 import android.widget.ProgressBar;
+import android.widget.TextView;
 
-import androidx.annotation.NonNull;
 import androidx.appcompat.app.AppCompatActivity;
 
-import com.application.arenda.Entities.Authentication.ApiAuthentication;
 import com.application.arenda.Entities.Authentication.Authentication;
-import com.application.arenda.Entities.Authentication.OnAuthenticationListener;
 import com.application.arenda.Entities.Utils.Utils;
 import com.application.arenda.R;
 import com.application.arenda.UI.ComponentBackground;
 import com.application.arenda.UI.SetDrawableImageViews;
 import com.application.arenda.UI.Style.SetBtnStyle;
 import com.application.arenda.UI.Style.SetFieldStyle;
-
-import java.net.ConnectException;
-import java.net.SocketTimeoutException;
+import com.backendless.BackendlessUser;
+import com.backendless.async.callback.AsyncCallback;
+import com.backendless.exceptions.BackendlessFault;
 
 import timber.log.Timber;
 
 public class ActivityAuthorization extends AppCompatActivity {
     private EditText fieldEmailAuth, fieldPassAuth;
+    private TextView itemForgotPass;
     private ImageView imagePinAuth;
     private Button btnSignAuth, btnRegAuth;
     private ProgressBar progressBarAuth;
@@ -53,9 +52,11 @@
         btnRegAuth = findViewById(R.id.btnRegAuth);
         btnSignAuth = findViewById(R.id.btnSignAuth);
 
+        itemForgotPass = findViewById(R.id.itemForgotPass);
+
         progressBarAuth = findViewById(R.id.progressBarAuth);
 
-        authentication = Authentication.getInstance(getApplicationContext());
+        authentication = Authentication.getInstance();
     }
 
     private void initStyles() {
@@ -73,51 +74,27 @@
     }
 
     private void initListeners() {
-        authentication.setOnAuthenticationListener(new OnAuthenticationListener() {
-            @Override
-            public void onComplete(@NonNull ApiAuthentication.AuthenticationCodes code) {
-                switch (code) {
-                    case USER_LOGGED:
-                        progressBarAuth.setVisibility(View.INVISIBLE);
-
-                        Intent intent = new Intent(ActivityAuthorization.this, ActivityMain.class);
-                        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);
-
-                        startActivity(intent);
-
-                        finish();
-                        break;
-
-                    case WRONG_EMAIL:
-                        progressBarAuth.setVisibility(View.INVISIBLE);
-                        fieldEmailAuth.setError(getString(R.string.error_user_not_found));
-                        break;
-
-                    case WRONG_PASSWORD:
+        btnRegAuth.setOnClickListener(v -> startActivity(new Intent(ActivityAuthorization.this, ActivityRegistration.class)));
+
+        itemForgotPass.setOnClickListener(v -> {
+            if (!Utils.fieldIsEmpty(getApplicationContext(), fieldEmailAuth))
+                authentication.restorePassword(fieldEmailAuth.getText().toString(), new AsyncCallback<Void>() {
+                    @Override
+                    public void handleResponse(Void response) {
                         progressBarAuth.setVisibility(View.INVISIBLE);
-                        fieldPassAuth.setError(getString(R.string.error_wrong_password));
-                        break;
 
-                    case UNKNOW_ERROR:
-                    case NETWORK_ERROR:
-                    case NOT_CONNECT_TO_DB:
-                        progressBarAuth.setVisibility(View.INVISIBLE);
-                        Utils.messageOutput(ActivityAuthorization.this, getString(R.string.error_check_internet_connect));
-                        break;
-                }
-            }
+                        Utils.messageOutput(getApplicationContext(), getResources().getString(R.string.instruction_send_to_email));
+                    }
 
-            @Override
-            public void onFailure(@NonNull Throwable t) {
-                Timber.e(t);
-                progressBarAuth.setVisibility(View.INVISIBLE);
-                if (t instanceof SocketTimeoutException || t instanceof ConnectException) {
-                    Utils.messageOutput(ActivityAuthorization.this, getString(R.string.error_check_internet_connect));
-                }
-            }
+                    @Override
+                    public void handleFault(BackendlessFault fault) {
+                        progressBarAuth.setVisibility(View.INVISIBLE);
+
+                        Utils.messageOutput(getApplicationContext(), "Error: - " + fault.getMessage());
+                        Timber.e(fault.getMessage());
+                    }
+                });
         });
-
-        btnRegAuth.setOnClickListener(v -> startActivity(new Intent(ActivityAuthorization.this, ActivityRegistration.class)));
 
         btnSignAuth.setOnClickListener(v -> {
             if (!Utils.fieldIsEmpty(getApplicationContext(), fieldEmailAuth, fieldPassAuth)) {
@@ -125,7 +102,24 @@
 
                 authentication.authorization(
                         fieldEmailAuth.getText().toString().trim(),
-                        fieldPassAuth.getText().toString().trim());
+                        fieldPassAuth.getText().toString().trim(),
+                        new AsyncCallback<BackendlessUser>() {
+                            @Override
+                            public void handleResponse(BackendlessUser response) {
+                                progressBarAuth.setVisibility(View.INVISIBLE);
+
+                                onBackPressed();
+                                finish();
+                            }
+
+                            @Override
+                            public void handleFault(BackendlessFault fault) {
+                                progressBarAuth.setVisibility(View.INVISIBLE);
+
+                                Utils.messageOutput(getApplicationContext(), "Error: - " + fault.getMessage());
+                                Timber.e(fault.getMessage());
+                            }
+                        });
             }
         });
     }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(date 1586470060000)
+++ app/src/main/AndroidManifest.xml	(date 1586470060000)
@@ -48,6 +48,18 @@
             </intent-filter>
         </activity>
 
+        <meta-data
+            android:name="firebase_performance_logcat_enabled"
+            android:value="true" />
+
+        <service
+            android:name="com.backendless.push.BackendlessFCMService"
+            tools:ignore="ExportedService">
+            <intent-filter>
+                <action android:name="com.google.firebase.MESSAGING_EVENT" />
+            </intent-filter>
+        </service>
+
     </application>
 
 </manifest>
\ No newline at end of file
Index: app/google-services.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/google-services.json	(date 1586467490000)
+++ app/google-services.json	(date 1586467490000)
@@ -0,0 +1,40 @@
+{
+  "project_info": {
+    "project_number": "292488677899",
+    "firebase_url": "https://rent-f450a.firebaseio.com",
+    "project_id": "rent-f450a",
+    "storage_bucket": "rent-f450a.appspot.com"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:292488677899:android:97d5b93f4966d4741a950e",
+        "android_client_info": {
+          "package_name": "com.application.trust"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "292488677899-c71ngqgqrn41tedn99qvmiku0i8oi5tm.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyB6k-TLKqBcskWt86LRW9k9cjjpoza71aA"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "292488677899-c71ngqgqrn41tedn99qvmiku0i8oi5tm.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
+    }
+  ],
+  "configuration_version": "1"
+}
\ No newline at end of file
Index: app/app.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/app.iml	(date 1586638317000)
+++ app/app.iml	(date 1586638317000)
@@ -19,7 +19,7 @@
         <option name="ALLOW_USER_CONFIGURATION" value="false" />
         <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
         <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res;file://$MODULE_DIR$/build/generated/res/google-services/debug" />
         <option name="TEST_RES_FOLDERS_RELATIVE_PATH" value="" />
         <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
       </configuration>
@@ -30,14 +30,15 @@
     <output-test url="file://$MODULE_DIR$/build/intermediates/javac/debugUnitTest/classes" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debug/out" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/debug/out" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debug/out" isTestSource="false" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/debug/out" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/google-services/debug" type="java-resource" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debugAndroidTest/out" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/aidl_source_output_dir/debugAndroidTest/out" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debugAndroidTest/out" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/renderscript_source_output_dir/debugAndroidTest/out" isTestSource="true" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" generated="true" />
       <sourceFolder url="file://$MODULE_DIR$/build/generated/ap_generated_sources/debugUnitTest/out" isTestSource="true" generated="true" />
@@ -93,7 +94,6 @@
     <orderEntry type="library" scope="TEST" name="Gradle: org.hamcrest:hamcrest-core:1.3@jar" level="project" />
     <orderEntry type="library" scope="TEST" name="Gradle: net.sf.kxml:kxml2:2.3.0@jar" level="project" />
     <orderEntry type="library" scope="TEST" name="Gradle: com.squareup:javawriter:2.1.1@jar" level="project" />
-    <orderEntry type="library" scope="TEST" name="Gradle: javax.inject:javax.inject:1@jar" level="project" />
     <orderEntry type="library" scope="TEST" name="Gradle: com.google.code.findbugs:jsr305:2.0.1@jar" level="project" />
     <orderEntry type="library" scope="TEST" name="Gradle: androidx.test.espresso:espresso-core:3.2.0@aar" level="project" />
     <orderEntry type="library" scope="TEST" name="Gradle: androidx.test:runner:1.2.0@aar" level="project" />
@@ -105,6 +105,8 @@
     <orderEntry type="library" name="Gradle: com.squareup.retrofit2:adapter-rxjava2:2.7.2@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.squareup.retrofit2:retrofit:2.7.2@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.squareup.okhttp3:logging-interceptor:4.4.1@jar" level="project" />
+    <orderEntry type="library" name="Gradle: io.socket:socket.io-client:1.0.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: io.socket:engine.io-client:1.0.0@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.squareup.okhttp3:okhttp:4.4.1@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.squareup.okio:okio:2.4.3@jar" level="project" />
     <orderEntry type="library" name="Gradle: org.jetbrains.kotlin:kotlin-stdlib:1.3.61@jar" level="project" />
@@ -122,6 +124,10 @@
     <orderEntry type="library" name="Gradle: org.threeten:threetenbp:1.4.1:no-tzdb@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.github.bumptech.glide:disklrucache:4.11.0@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.github.bumptech.glide:annotations:4.11.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.auto.value:auto-value-annotations:1.6.5@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.dagger:dagger:2.24@jar" level="project" />
+    <orderEntry type="library" name="Gradle: javax.inject:javax.inject:1@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.backendless:backendless:5.7.0@jar" level="project" />
     <orderEntry type="library" name="Gradle: org.greenrobot:eventbus:3.2.0@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.readystatesoftware.chuck:library:1.1.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.github.piasy:GlideImageLoader:1.6.2@aar" level="project" />
@@ -137,7 +143,28 @@
     <orderEntry type="library" name="Gradle: com.github.filippudak.progresspieview:library:1.0.4@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.legacy:legacy-support-v4:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.github.bumptech.glide:glide:4.11.0@aar" level="project" />
-    <orderEntry type="library" name="Gradle: androidx.fragment:fragment:1.2.3@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-messaging:20.1.5@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-core:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-analytics:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-measurement:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-measurement-api:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-measurement-sdk:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-iid:20.1.5@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-measurement-impl:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-stats:17.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-datatransport:17.0.3@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-installations:16.2.1@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-common:19.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-installations-interop:16.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-iid-interop:17.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-base:17.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-tasks:17.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-measurement-connector:18.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-measurement-sdk-api:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-measurement-base:17.3.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-ads-identifier:17.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-basement:17.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: androidx.fragment:fragment:1.2.4@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.appcompat:appcompat-resources:1.1.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.legacy:legacy-support-core-ui:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.drawerlayout:drawerlayout:1.0.0@aar" level="project" />
@@ -167,6 +194,10 @@
     <orderEntry type="library" name="Gradle: com.github.piasy:BigImageViewer:1.6.2@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.davemorrissey.labs:subsampling-scale-image-view:3.10.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.exifinterface:exifinterface:1.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.datatransport:transport-backend-cct:2.2.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.datatransport:transport-runtime:2.2.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-components:16.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.firebase:firebase-encoders-json:16.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.documentfile:documentfile:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.localbroadcastmanager:localbroadcastmanager:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.print:print:1.0.0@aar" level="project" />
@@ -179,6 +210,8 @@
     <orderEntry type="library" name="Gradle: com.jakewharton.threetenabp:threetenabp:1.2.2@aar" level="project" />
     <orderEntry type="library" name="Gradle: ru.tinkoff.decoro:decoro:1.4.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.android.volley:volley:1.1.1@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.android.datatransport:transport-api:2.2.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.github.florent37:expansionpanel:1.2.2@aar" level="project" />
+    <orderEntry type="library" name="Gradle: de.hdodenhof:circleimageview:3.1.0@aar" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(date 1586611590000)
+++ app/build.gradle	(date 1586611590000)
@@ -1,4 +1,5 @@
 apply plugin: 'com.android.application'
+apply plugin: 'com.google.gms.google-services'
 
 android {
     compileSdkVersion 29
@@ -23,6 +24,10 @@
             minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
 
+            buildConfigField "String", "BackendlessURL", "\"https://api.backendless.com\""
+            buildConfigField "String", "BackendlessAppID", "\"19296DC2-5955-5C8B-FFE2-69EECE7C0100\""
+            buildConfigField "String", "BackendlessApiKey", "\"30582E07-1801-428A-BDC6-3512DF237F35\""
+
             buildConfigField "String", "BASE_URL", "\"http://192.168.43.241/AndroidConnectWithServer/\""
 //            buildConfigField "String", "BASE_URL", "\"http://192.168.43.242/AndroidConnectWithServer/\""
 
@@ -48,6 +53,10 @@
             minifyEnabled true
             proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
 
+            buildConfigField "String", "BackendlessURL", "\"https://api.backendless.com\""
+            buildConfigField "String", "BackendlessAppID", "\"19296DC2-5955-5C8B-FFE2-69EECE7C0100\""
+            buildConfigField "String", "BackendlessApiKey", "\"30582E07-1801-428A-BDC6-3512DF237F35\""
+
             buildConfigField "String", "BASE_URL", "\"http://192.168.43.241/AndroidConnectWithServer/\""
 //            buildConfigField "String", "BASE_URL", "\"http://192.168.43.242/AndroidConnectWithServer/\""
 
@@ -68,6 +77,14 @@
 
         }
     }
+
+    defaultConfig {
+        multiDexEnabled true
+    }
+
+    dexOptions {
+        javaMaxHeapSize "3g" //specify the heap size for the dex process
+    }
 }
 
 dependencies {
@@ -80,7 +97,7 @@
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
     implementation 'androidx.recyclerview:recyclerview:1.1.0'
     implementation 'com.google.android.material:material:1.1.0'
-    implementation "androidx.fragment:fragment:1.2.3"
+    implementation "androidx.fragment:fragment:1.2.4"
 
     implementation "io.reactivex.rxjava2:rxjava:2.2.16"
     implementation "io.reactivex.rxjava2:rxandroid:2.1.1"
@@ -115,7 +132,19 @@
     implementation 'com.github.piasy:GlideImageLoader:1.6.2'
     implementation 'com.github.piasy:ProgressPieIndicator:1.6.2'
 
+    implementation 'com.google.firebase:firebase-analytics:17.3.0'
+    implementation 'com.google.firebase:firebase-core:17.3.0'
+    implementation 'com.google.firebase:firebase-messaging:20.1.5'
+
+    implementation group: 'com.backendless', name: 'backendless', version: '5.7.0'
+    implementation ( group: 'io.socket', name: 'socket.io-client', version: '1.0.0' ) {
+        //      excluding org.json which is provided by Android
+        exclude group: 'org.json', module: 'json'
+    }
+
     implementation 'com.github.florent37:expansionpanel:1.2.2'
 
     implementation 'org.greenrobot:eventbus:3.2.0'
+
+    implementation 'de.hdodenhof:circleimageview:3.1.0'
 }
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/proguard-rules.pro	(date 1586451341000)
+++ app/proguard-rules.pro	(date 1586451341000)
@@ -38,9 +38,16 @@
 # RxAndroid
 -dontwarn rx.internal.util.unsafe.**
 
-#Eventbus
+# Eventbus
 -keepattributes *Annotation*
--keepclassmembers class ** {
-    @org.greenrobot.eventbus.Subscribe <methods>;
-}
--keep enum org.greenrobot.eventbus.ThreadMode { *; }
\ No newline at end of file
+-keepclassmembers class ** {@org.greenrobot.eventbus.Subscribe <methods>;}
+-keep enum org.greenrobot.eventbus.ThreadMode { *; }
+
+# Firebase
+-keepattributes Signature
+
+# Backendless
+-dontwarn com.backendless.**
+-dontwarn weborb.**
+-keep class weborb.** {*;}
+-keep class com.backendless.** {*;}
\ No newline at end of file
Index: app/build/generated/res/google-services/debug/values/values.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/res/google-services/debug/values/values.xml	(date 1586611602000)
+++ app/build/generated/res/google-services/debug/values/values.xml	(date 1586611602000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="default_web_client_id" translatable="false">292488677899-c71ngqgqrn41tedn99qvmiku0i8oi5tm.apps.googleusercontent.com</string>
+    <string name="firebase_database_url" translatable="false">https://rent-f450a.firebaseio.com</string>
+    <string name="gcm_defaultSenderId" translatable="false">292488677899</string>
+    <string name="google_api_key" translatable="false">AIzaSyB6k-TLKqBcskWt86LRW9k9cjjpoza71aA</string>
+    <string name="google_app_id" translatable="false">1:292488677899:android:97d5b93f4966d4741a950e</string>
+    <string name="google_crash_reporting_api_key" translatable="false">AIzaSyB6k-TLKqBcskWt86LRW9k9cjjpoza71aA</string>
+    <string name="google_storage_bucket" translatable="false">rent-f450a.appspot.com</string>
+    <string name="project_id" translatable="false">rent-f450a</string>
+</resources>
Index: app/build/generated/source/buildConfig/debug/com/application/arenda/BuildConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/source/buildConfig/debug/com/application/arenda/BuildConfig.java	(date 1586611602000)
+++ app/build/generated/source/buildConfig/debug/com/application/arenda/BuildConfig.java	(date 1586611602000)
@@ -12,6 +12,9 @@
   public static final String VERSION_NAME = "1.0";
   // Fields from build type: debug
   public static final String BASE_URL = "http://192.168.43.241/AndroidConnectWithServer/";
+  public static final String BackendlessApiKey = "30582E07-1801-428A-BDC6-3512DF237F35";
+  public static final String BackendlessAppID = "19296DC2-5955-5C8B-FFE2-69EECE7C0100";
+  public static final String BackendlessURL = "https://api.backendless.com";
   public static final String URL_AUTHORIZATION = "php/authentication/AuthorizationUser.php";
   public static final String URL_AUTHORIZATION_USE_TOKEN = "php/authentication/AuthorizationUseToken.php";
   public static final String URL_INSERT_ANNOUNCEMENT = "php/insert/InsertAnnouncement.php";
Index: app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/Categories/CategoriesVH_ViewBinding.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/Categories/CategoriesVH_ViewBinding.java	(date 1586676565000)
+++ app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/Categories/CategoriesVH_ViewBinding.java	(date 1586676565000)
@@ -0,0 +1,42 @@
+// Generated code from Butter Knife. Do not modify!
+package com.application.arenda.Entities.Announcements.Categories;
+
+import android.view.View;
+import android.widget.ImageView;
+import android.widget.TextView;
+import androidx.annotation.CallSuper;
+import androidx.annotation.UiThread;
+import androidx.recyclerview.widget.RecyclerView;
+import butterknife.Unbinder;
+import butterknife.internal.Utils;
+import com.application.arenda.R;
+import com.github.florent37.expansionpanel.ExpansionLayout;
+import java.lang.IllegalStateException;
+import java.lang.Override;
+
+public class CategoriesVH_ViewBinding implements Unbinder {
+  private CategoriesVH target;
+
+  @UiThread
+  public CategoriesVH_ViewBinding(CategoriesVH target, View source) {
+    this.target = target;
+
+    target.categoryTitle = Utils.findOptionalViewAsType(source, R.id.categoryTitle, "field 'categoryTitle'", TextView.class);
+    target.categoryIcon = Utils.findOptionalViewAsType(source, R.id.categoryIcon, "field 'categoryIcon'", ImageView.class);
+    target.rvItemCategory = Utils.findOptionalViewAsType(source, R.id.rvItemCategory, "field 'rvItemCategory'", RecyclerView.class);
+    target.categoryExpansionLayout = Utils.findOptionalViewAsType(source, R.id.categoryExpansionLayout, "field 'categoryExpansionLayout'", ExpansionLayout.class);
+  }
+
+  @Override
+  @CallSuper
+  public void unbind() {
+    CategoriesVH target = this.target;
+    if (target == null) throw new IllegalStateException("Bindings already cleared.");
+    this.target = null;
+
+    target.categoryTitle = null;
+    target.categoryIcon = null;
+    target.rvItemCategory = null;
+    target.categoryExpansionLayout = null;
+  }
+}
Index: app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/Categories/SubcategoryVH_ViewBinding.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/Categories/SubcategoryVH_ViewBinding.java	(date 1586676565000)
+++ app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/Categories/SubcategoryVH_ViewBinding.java	(date 1586676565000)
@@ -0,0 +1,33 @@
+// Generated code from Butter Knife. Do not modify!
+package com.application.arenda.Entities.Announcements.Categories;
+
+import android.view.View;
+import android.widget.TextView;
+import androidx.annotation.CallSuper;
+import androidx.annotation.UiThread;
+import butterknife.Unbinder;
+import butterknife.internal.Utils;
+import com.application.arenda.R;
+import java.lang.IllegalStateException;
+import java.lang.Override;
+
+public class SubcategoryVH_ViewBinding implements Unbinder {
+  private SubcategoryVH target;
+
+  @UiThread
+  public SubcategoryVH_ViewBinding(SubcategoryVH target, View source) {
+    this.target = target;
+
+    target.subcategoryTitle = Utils.findOptionalViewAsType(source, R.id.subcategoryTitle, "field 'subcategoryTitle'", TextView.class);
+  }
+
+  @Override
+  @CallSuper
+  public void unbind() {
+    SubcategoryVH target = this.target;
+    if (target == null) throw new IllegalStateException("Bindings already cleared.");
+    this.target = null;
+
+    target.subcategoryTitle = null;
+  }
+}
Index: app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogViewHolderRV_ViewBinding.java
===================================================================
--- app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogViewHolderRV_ViewBinding.java	(date 0)
+++ app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogViewHolderRV_ViewBinding.java	(date 0)
@@ -1,33 +0,0 @@
-// Generated code from Butter Knife. Do not modify!
-package com.application.arenda.Entities.Announcements.ViewAnnouncement.DialogFragment;
-
-import android.view.View;
-import android.widget.TextView;
-import androidx.annotation.CallSuper;
-import androidx.annotation.UiThread;
-import butterknife.Unbinder;
-import butterknife.internal.Utils;
-import com.application.arenda.R;
-import java.lang.IllegalStateException;
-import java.lang.Override;
-
-public class DialogViewHolderRV_ViewBinding implements Unbinder {
-  private DialogViewHolderRV target;
-
-  @UiThread
-  public DialogViewHolderRV_ViewBinding(DialogViewHolderRV target, View source) {
-    this.target = target;
-
-    target.titlePhoneNumber = Utils.findOptionalViewAsType(source, R.id.titlePhoneNumber, "field 'titlePhoneNumber'", TextView.class);
-  }
-
-  @Override
-  @CallSuper
-  public void unbind() {
-    DialogViewHolderRV target = this.target;
-    if (target == null) throw new IllegalStateException("Bindings already cleared.");
-    this.target = null;
-
-    target.titlePhoneNumber = null;
-  }
-}
Index: app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogCallPhoneNumber_ViewBinding.java
===================================================================
--- app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogCallPhoneNumber_ViewBinding.java	(date 0)
+++ app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/ViewAnnouncement/DialogFragment/DialogCallPhoneNumber_ViewBinding.java	(date 0)
@@ -1,33 +0,0 @@
-// Generated code from Butter Knife. Do not modify!
-package com.application.arenda.Entities.Announcements.ViewAnnouncement.DialogFragment;
-
-import android.view.View;
-import androidx.annotation.CallSuper;
-import androidx.annotation.UiThread;
-import androidx.recyclerview.widget.RecyclerView;
-import butterknife.Unbinder;
-import butterknife.internal.Utils;
-import com.application.arenda.R;
-import java.lang.IllegalStateException;
-import java.lang.Override;
-
-public class DialogCallPhoneNumber_ViewBinding implements Unbinder {
-  private DialogCallPhoneNumber target;
-
-  @UiThread
-  public DialogCallPhoneNumber_ViewBinding(DialogCallPhoneNumber target, View source) {
-    this.target = target;
-
-    target.recyclerView = Utils.findOptionalViewAsType(source, R.id.callPhoneNumberRV, "field 'recyclerView'", RecyclerView.class);
-  }
-
-  @Override
-  @CallSuper
-  public void unbind() {
-    DialogCallPhoneNumber target = this.target;
-    if (target == null) throw new IllegalStateException("Bindings already cleared.");
-    this.target = null;
-
-    target.recyclerView = null;
-  }
-}
Index: app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesVH_ViewBinding.java
===================================================================
--- app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesVH_ViewBinding.java	(date 0)
+++ app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/CategoriesVH_ViewBinding.java	(date 0)
@@ -1,42 +0,0 @@
-// Generated code from Butter Knife. Do not modify!
-package com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories;
-
-import android.view.View;
-import android.widget.ImageView;
-import android.widget.TextView;
-import androidx.annotation.CallSuper;
-import androidx.annotation.UiThread;
-import androidx.recyclerview.widget.RecyclerView;
-import butterknife.Unbinder;
-import butterknife.internal.Utils;
-import com.application.arenda.R;
-import com.github.florent37.expansionpanel.ExpansionLayout;
-import java.lang.IllegalStateException;
-import java.lang.Override;
-
-public class CategoriesVH_ViewBinding implements Unbinder {
-  private CategoriesVH target;
-
-  @UiThread
-  public CategoriesVH_ViewBinding(CategoriesVH target, View source) {
-    this.target = target;
-
-    target.categoryTitle = Utils.findOptionalViewAsType(source, R.id.categoryTitle, "field 'categoryTitle'", TextView.class);
-    target.categoryIcon = Utils.findOptionalViewAsType(source, R.id.categoryIcon, "field 'categoryIcon'", ImageView.class);
-    target.rvItemCategory = Utils.findOptionalViewAsType(source, R.id.rvItemCategory, "field 'rvItemCategory'", RecyclerView.class);
-    target.categoryExpansionLayout = Utils.findOptionalViewAsType(source, R.id.categoryExpansionLayout, "field 'categoryExpansionLayout'", ExpansionLayout.class);
-  }
-
-  @Override
-  @CallSuper
-  public void unbind() {
-    CategoriesVH target = this.target;
-    if (target == null) throw new IllegalStateException("Bindings already cleared.");
-    this.target = null;
-
-    target.categoryTitle = null;
-    target.categoryIcon = null;
-    target.rvItemCategory = null;
-    target.categoryExpansionLayout = null;
-  }
-}
Index: app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoryVH_ViewBinding.java
===================================================================
--- app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoryVH_ViewBinding.java	(date 0)
+++ app/build/generated/ap_generated_sources/debug/out/com/application/arenda/Entities/Announcements/InsertAnnouncement/Categories/SubcategoryVH_ViewBinding.java	(date 0)
@@ -1,33 +0,0 @@
-// Generated code from Butter Knife. Do not modify!
-package com.application.arenda.Entities.Announcements.InsertAnnouncement.Categories;
-
-import android.view.View;
-import android.widget.TextView;
-import androidx.annotation.CallSuper;
-import androidx.annotation.UiThread;
-import butterknife.Unbinder;
-import butterknife.internal.Utils;
-import com.application.arenda.R;
-import java.lang.IllegalStateException;
-import java.lang.Override;
-
-public class SubcategoryVH_ViewBinding implements Unbinder {
-  private SubcategoryVH target;
-
-  @UiThread
-  public SubcategoryVH_ViewBinding(SubcategoryVH target, View source) {
-    this.target = target;
-
-    target.subcategoryTitle = Utils.findOptionalViewAsType(source, R.id.subcategoryTitle, "field 'subcategoryTitle'", TextView.class);
-  }
-
-  @Override
-  @CallSuper
-  public void unbind() {
-    SubcategoryVH target = this.target;
-    if (target == null) throw new IllegalStateException("Bindings already cleared.");
-    this.target = null;
-
-    target.subcategoryTitle = null;
-  }
-}
